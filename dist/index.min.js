function t(t,n,s){const{width:i,height:o}=n,a=e(n,s);!function(t,e,n,s){const i=(Math.min(e,n)-s)/2;t.setAttribute("stroke-width",`${s}`),t.setAttribute("cx",`${e/2}`),t.setAttribute("cy",`${n/2}`),t.setAttribute("r",`${i}`)}(t,i,o,a.dashWidth);const{strokeDasharray:r,strokeDashOffset:d}=function(t,n){const{width:s,height:i}=t,{dashWidth:o,dashLength:a,dashRatio:r}=e(t,n),d=(Math.min(s,i)-o)/2,h=2*Math.PI*d,l=Math.floor((h-r*a)/((1+r)*a)),c=Math.round((h-l*a)/(l+1)*Math.pow(10,3))/Math.pow(10,3);return{strokeDasharray:`${a} ${c}`,strokeDashOffset:"0",dashWidth:o}}(n,a);!function(t,e,n){t.setAttribute("stroke-dasharray",e),t.setAttribute("stroke-dashoffset",n)}(t,r,d)}function e(t,e){const{width:n,height:s}=t;let{dashWidth:i,dashLength:o,dashRatio:a}=e;if(i<0||o<0||a<0)throw new Error("dashWidth, dashLength and dashRatio must be positive numbers");const r=Math.min(n,s);return{dashWidth:i=i>r/2?r/2:i,dashLength:o=o>r?r:o,dashRatio:a=o*(1+a)>r?r-o:a}}function n(t,e,n){const{width:i,height:o}=e,a=s(e,n);!function(t,e,n,s){t.setAttribute("x1","0"),t.setAttribute("y1",`${n-s/2}`),t.setAttribute("x2",`${e}`),t.setAttribute("y2",`${n-s/2}`),t.setAttribute("stroke-width",`${s}`)}(t,i,o,a.dashWidth);const{strokeDasharray:r,strokeDashOffset:d}=function(t,e){const{width:n}=t,{dashWidth:i,dashLength:o,dashRatio:a}=s(t,e),r=1+Math.floor((n-o)/((1+a)*o)),d=Math.round((n-r*o)/(r-1)*Math.pow(10,3))/Math.pow(10,3);return{strokeDasharray:`${o} ${d}`,strokeDashOffset:"0",dashWidth:i}}(e,a);!function(t,e,n){t.setAttribute("stroke-dasharray",e),t.setAttribute("stroke-dashoffset",n)}(t,r,d)}function s(t,e){const{width:n}=t;let{dashWidth:s,dashLength:i,dashRatio:o}=e;if(s<0||i<0||o<0)throw new Error("dashWidth, dashLength and dashRatio must be positive numbers");return{dashWidth:s=s>n/2?n/2:s,dashLength:i=i>n?n:i,dashRatio:o=i*(1+o)>n?n-i:o}}function i(t,e,n){const{width:s,height:i,borderRadius:h}=e,l=o(e,n);!function(t,e,n,s,i){t.setAttribute("stroke-width",`${i}`),t.setAttribute("x",`${i/2}`),t.setAttribute("y",`${i/2}`),t.setAttribute("width",`${e-i}`),t.setAttribute("height",`${n-i}`),t.setAttribute("rx",`${s}`),t.setAttribute("ry",`${s}`)}(t,s,i,h,l.dashWidth);const{strokeDasharray:c,strokeDashOffset:u}=function(t,e){const{width:n,height:s,borderRadius:i}=t,{dashWidth:h,dashLength:l,dashRatio:c}=o(t,e),u=n-h-2*i,p=s-h-2*i,g=2*Math.PI*i/4,b=a(u,{dashWidth:h,dashLength:l,dashRatio:c}),m=a(p,{dashWidth:h,dashLength:l,dashRatio:c}),v=a(g,{dashWidth:h,dashLength:l,dashRatio:c}),w=r(u,b,l),f=r(p,m,l),y=r(g,v,l),x=d(b,w,y,l),_=d(v,y,f,l),k=d(m,f,y,l),A=d(v,y,w,l);return{strokeDasharray:`${x}${_}${k}${A}`.trim(),strokeDashOffset:`${-w}`,dashWidth:h}}(e,l);!function(t,e,n){t.setAttribute("stroke-dasharray",e),t.setAttribute("stroke-dashoffset",n)}(t,c,u)}function o(t,e){const{width:n,height:s}=t;let{dashWidth:i,dashLength:o,dashRatio:a}=e;if(i<0||o<0||a<0)throw new Error("dashWidth, dashLength and dashRatio must be positive numbers");const r=Math.min(n,s);return{dashWidth:i=i>r/2?r/2:i,dashLength:o=o>r?r:o,dashRatio:a=o*(1+a)>r?r-o:a}}function a(t,e){const{dashLength:n,dashRatio:s}=e;return t-s*n<=0?0:Math.floor((t-s*n)/((1+s)*n))}function r(t,e,n){return 0===e?t/2:Math.round((t-e*n)/(e+1)*Math.pow(10,3))/Math.pow(10,3)}function d(t,e,n,s){return 0===t?`0 ${e+n} `:`${s} ${e} `.repeat(t-1)+`${s} ${e+n} `}const h='\n  <style title="Common styles">\n    :host{\n      --dashed-primary-color: rgba(54, 54, 231, 1);\n      --dashed-primary-light-color: rgba(54, 54, 231, 0.15);\n\n      --dashed-danger-color: rgba(250, 50, 50, 1);\n      --dashed-danger-light-color: rgba(250, 50, 50, 0.15);\n\n      --dashed-success-color: rgba(31, 141, 87, 1);\n      --dashed-success-light-color: rgba(31, 141, 87, 0.15);\n\n      --dashed-fill-color: var(--dashed-primary-light-color);\n      --dashed-outline-color: rgba(129, 129, 193);\n      z-index: 1;\n    }\n\n    :host(:focus) svg.dash {\n      outline: 1px solid var(--dashed-outline-color);\n      outline-offset: 1px;\n    }\n\n    :host([disabled]) {\n      opacity: 0.6;\n      pointer-events: none;\n    }\n\n    svg.dash {\n      position: absolute;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      fill: none;\n      z-index: -1;\n    }\n\n    svg.dash .border {\n      stroke: var(--dashed-primary-color);\n      fill: var(--dashed-fill-color);\n    }\n\n    svg.dash .border-bottom {\n      stroke: var(--dashed-primary-color);\n    }\n\n    svg.dash .background {\n      fill: var(--dashed-fill-color);\n    }\n  </style>\n';class l extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open",delegatesFocus:!0}),this.dashProps={dashWidth:2,dashLength:8,dashRatio:.3},this._firstRender=!0}get disabled(){return this.hasAttribute("disabled")}set disabled(t){Boolean(t)?this.setAttribute("disabled",""):this.removeAttribute("disabled")}get rounded(){return this.hasAttribute("rounded")}set rounded(t){Boolean(t)?this.setAttribute("rounded",""):this.removeAttribute("rounded")}get dashProps(){return this._dashProps}set dashProps(t){this._dashProps=t}connectedCallback(){this.render(),this.updateIcon(),this._firstRender=!1}static get observedAttributes(){return["rounded"]}attributeChangedCallback(t,e,n){this._firstRender||this.drawDash()}updateIcon(){this._icon=this.shadowRoot.querySelector('slot[name="icon"]').assignedNodes()[0],this._icon&&"dashed-icon"===this._icon.localName?this._icon.addEventListener("iconloaded",this.drawDash.bind(this)):this.drawDash()}disconnectedCallback(){this._icon&&this._icon.removeEventListener("iconloaded",this.drawDash.bind(this))}render(){const t=document.createElement("template");t.innerHTML=`\n      ${h}\n      <style>\n        :host {\n          display: inline-block;\n          cursor: pointer;\n          outline: none;\n          position: relative;\n        }\n\n        :host(:hover) {\n          color: var(--dashed-primary-color);\n          --dashed-fill-color: var(--dashed-primary-light-color);\n        }\n\n        button {\n          min-width: 48px;\n          min-height: 32px;\n          display: inline-flex;\n          align-items: center;\n          justify-content: center;\n          background: none;\n          cursor: inherit;\n          color: inherit;\n          border: none;\n          outline: none;\n          padding: 4px 12px;\n          font-size: 14px;\n          position: relative;\n          transition: color 50ms ease-in-out;\n        }\n\n        :host ::slotted([slot="icon"]) {\n          stroke: currentColor;\n          padding-right: 4px;\n        }\n      </style>\n      <button type="button">\n        <slot name="icon"></slot>\n        <slot></slot>\n        <svg class="dash">\n          <rect class="border" />\n        </svg>\n      </button>\n    `,this.shadowRoot.appendChild(t.content.cloneNode(!0))}drawDash(){const t=this.shadowRoot.querySelector("svg.dash").querySelector(".border"),{width:e,height:n}=this.getBoundingClientRect();i(t,{width:e,height:n,borderRadius:this.rounded?(n-this.dashProps.dashWidth)/2:0},this.dashProps)}}customElements.define("dashed-button",l);class c extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open",delegatesFocus:!0}),this.dashProps={dashWidth:2,dashLength:20,dashRatio:.1}}get dashProps(){return this._dashProps}set dashProps(t){this._dashProps=t}connectedCallback(){this.render(),this.drawDash(),window.addEventListener("resize",this.drawDash.bind(this))}disconnectedCallback(){window.removeEventListener("resize",this.drawDash.bind(this))}render(){const t=document.createElement("template");t.innerHTML=`\n      ${h}\n      <style>\n        :host {\n          --dashed-card-min-width: 256px;\n          --dashed-card-max-width: 512px;\n\n          display: inline-flex;\n          align-items: center;\n          justify-content: center;\n          position: relative;\n          cursor: inherit;\n          outline: none;\n          min-width: var(--dashed-card-min-width);\n          max-width: var(--dashed-card-max-width);\n        }\n\n        .card {\n          display: inline-block;\n          position: relative;\n          width: 100%;\n          height: 100%;\n          padding: 10px;\n        }\n\n        .card__title {\n        }\n\n        .card__content {\n        }\n\n        .card__footer {\n          display: flex;\n          justify-content: flex-end;\n        }\n\n        .card__footer__button {\n          display: inline-block;\n          cursor: pointer;\n        }\n      </style>\n      <div class="card">\n        <h4 class="card__title">Card title</h3>\n        <h5 class="card__subtitle">Card subtitle</h5>\n        <div class="card__content">\n          This is the card content. This is a text divlacehoder.\n          <p>It can grow at will</p>\n        </div>\n        <div class="card__footer">\n          <small>Here the card footer</small>\n          <button class="card__footer__button">button1</button>\n          <button class="card__footer__button">button2</button>\n        </div>\n        <svg class="dash" filter="url(#shadow2)">\n          <rect class="border" />\n          <filter id="shadow2">\n            <feDropShadow dx="0" dy="2" stdDeviation="2" flood-opacity="0.3" />\n          </filter>\n        </svg>\n      </div>\n    `,this.shadowRoot.appendChild(t.content.cloneNode(!0))}drawDash(){const t=this.shadowRoot.querySelector("svg.dash").querySelector(".border"),{width:e,height:n}=this.getBoundingClientRect();i(t,{width:e,height:n,borderRadius:16},this.dashProps)}}customElements.define("dashed-card",c);class u extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open",delegatesFocus:!0}),this.dashProps={dashWidth:2,dashLength:4,dashRatio:.5}}get disabled(){return this.hasAttribute("disabled")}set disabled(t){Boolean(t)?this.setAttribute("disabled",""):this.removeAttribute("disabled")}get checked(){return this.hasAttribute("checked")}set checked(t){Boolean(t)?this.setAttribute("checked",""):this.removeAttribute("checked")}get dashProps(){return this._dashProps}set dashProps(t){this._dashProps=t}connectedCallback(){this.render(),this.drawDash()}render(){const t=document.createElement("template");t.innerHTML=`\n      ${h}\n      <style>\n        :host {\n          display: inline-flex;\n          align-items: center;\n          justify-content: center;\n          position: relative;\n          cursor: inherit;\n          outline: none;\n          min-width: 48px;\n        }\n\n        .checkbox-container {\n          display: inline-block;\n          position: relative;\n          width: 24px;\n          height: 24px;\n        }\n\n        input[type="checkbox"] {\n          margin: 0;\n          width: 100%;\n          height: 100%;\n          opacity: 0;\n        }\n\n        svg.dash .checkmark {\n          stroke: var(--dashed-danger-color);\n        }\n\n        input[type="checkbox"]:not(:checked) ~ svg.dash .checkmark {\n          opacity: 0;\n        }\n\n        input[type="checkbox"]:checked ~ svg.dash .checkmark {\n          opacity: 1;\n        }\n      </style>\n      <div class="checkbox-container">\n        <input type="checkbox" id="checkbox" />\n        <svg class="dash">\n          <rect class="border" />\n          <path class="checkmark" />\n        </svg>\n      </div>\n      <label for="checkbox"><slot></slot></label>\n    `,this.shadowRoot.appendChild(t.content.cloneNode(!0))}drawDash(){const t=this.shadowRoot.querySelector("svg.dash"),e=t.querySelector(".border"),[n,s]=[24,24];i(e,{width:n,height:s,borderRadius:0},this.dashProps);const o=t.querySelector(".checkmark");o.setAttribute("stroke-width",`${1.8*this.dashProps.dashWidth}`),o.setAttribute("d","M6 12l4 4l8 -8")}}customElements.define("dashed-checkbox",u);class p extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open",delegatesFocus:!0}),this.dashProps={dashWidth:2,dashLength:4,dashRatio:.5},this._firstRender=!0}get disabled(){return this.hasAttribute("disabled")}set disabled(t){Boolean(t)?this.setAttribute("disabled",""):this.removeAttribute("disabled")}get ariaLabel(){return this.hasAttribute("aria-label")}set ariaLabel(t){Boolean(t)?this.setAttribute("aria-label",t):this.removeAttribute("aria-label")}get dashProps(){return this._dashProps}set dashProps(t){this._dashProps=t}connectedCallback(){this.render(),this.updateIcon(),this._firstRender=!1}updateIcon(){this._icon=this.shadowRoot.querySelector('slot[name="icon"]').assignedNodes()[0],this._icon&&"dashed-icon"===this._icon.localName?this._icon.addEventListener("iconloaded",this.drawDash.bind(this)):this.drawDash()}disconnectedCallback(){this._icon&&this._icon.removeEventListener("iconloaded",this.drawDash.bind(this))}render(){const t=document.createElement("template");t.innerHTML=`\n      ${h}\n      <style>\n        :host {\n          display: inline-block;\n          cursor: pointer;\n          outline: none;\n          position: relative;\n        }\n\n        :host(:hover) button {\n          color: var(--dashed-danger-color);\n        }\n\n        .button-container {\n          display: inline-flex;\n          align-items: center;\n          justify-content: center;\n          position: relative;\n          width: 56px;\n          height: 56px;\n        }\n\n        button {\n          width: 48px;\n          height: 48px;\n          display: inline-flex;\n          align-items: center;\n          justify-content: center;\n          background: none;\n          cursor: inherit;\n          border: none;\n          outline: none;\n          position: relative;\n          transition: color 50ms ease-in-out;\n        }\n\n        svg.dash .circles {\n          will-change: transform;\n        }\n\n        svg.dash .outer-circle,\n        svg.dash .inner-circle {\n          stroke: var(--dashed-primary-color);\n        }\n      </style>\n      <div class="button-container">\n        <button type="button" aria-label="${this.ariaLabel}">\n          <slot name="icon"></slot>\n        </button>\n        <svg class="dash">\n          <g class="circles">\n            <circle class="outer-circle" id="outer"  filter="url(#shadow2)"/>\n            <circle class="inner-circle" />\n          </g>\n          <filter id="shadow2">\n            <feDropShadow dx="2" dy="2" stdDeviation="2" flood-opacity="0.9" />\n          </filter>\n          <mask id="mask">\n            <use href="#outer" fill="black" stroke="white" />\n          </mask>\n        </svg>\n      </div>\n    `,this.shadowRoot.appendChild(t.content.cloneNode(!0))}drawDash(){const e=this.shadowRoot.querySelector("svg.dash"),[n,s]=[48,48],i=e.querySelector(".circles");t(i.querySelector(".outer-circle"),{width:n,height:s},this.dashProps);const o=i.querySelector(".inner-circle");t(o,{width:n-12,height:s-12},this.dashProps),o.setAttribute("transform","translate(6 6)"),i.style.transform="translate(4px, 4px)"}}customElements.define("dashed-fab",p);class g extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open",delegatesFocus:!0}),this.dashProps={dashWidth:2,dashLength:20,dashRatio:.1}}connectedCallback(){this.drawDash(),window.addEventListener("resize",this.drawDash.bind(this))}disconnectedCallback(){window.removeEventListener("resize",this.drawDash.bind(this))}render(){const t=document.createElement("template");t.innerHTML=`\n      ${h}\n      <style>\n        :host {\n          --dashed-footer-min-width: 256px;\n          --dashed-footer-max-width: 512px;\n\n          display: inline-flex;\n          align-items: center;\n          justify-content: center;\n          position: relative;\n          cursor: inherit;\n          outline: none;\n          min-width: var(--dashed-footer-min-width);\n          max-width: var(--dashed-footer-max-width);\n        }\n\n\n        .footer {\n          display: inline-block;\n          position: relative;\n          width: 100%;\n          height: 100%;\n          padding: 10px;\n        }\n\n        .footer__title {\n        }\n\n        .footer__content {\n        }\n\n        .footer__footer {\n          display: flex;\n          justify-content: flex-end;\n        }\n\n        .footer__footer__button {\n          display: inline-block;\n          cursor: pointer;\n        }\n      </style>\n      <div class="footer">\n        <h4 class="footer__title">Footer title</h3>\n        <h5 class="footer__subtitle">Footer subtitle</h5>\n        <div class="footer__content">\n          This is the footer content. This is a text divlacehoder.\n          <p>It can grow at will</p>\n        </div>\n        <div class="footer__footer">\n          <small>Here the footer footer</small>\n          <button class="footer__footer__button">button1</button>\n          <button class="footer__footer__button">button2</button>\n        </div>\n        <svg class="dash" filter="url(#shadow2)">\n          <rect class="border" />\n          <filter id="shadow2">\n            <feDropShadow dx="0" dy="2" stdDeviation="2" flood-opacity="0.3" />\n          </filter>\n        </svg>\n      </div>\n    `,this.shadowRoot.appendChild(t.content.cloneNode(!0))}drawDash(){}}customElements.define("dashed-footer",g);void 0!==window.customElements&&window.customElements.polyfillWrapFlushCallback,String(Math.random()).slice(2),(()=>{const t=document.createElement("div");t.setAttribute("style","{{bad value}}"),t.getAttribute("style")})(),NodeFilter.SHOW_ELEMENT,NodeFilter.SHOW_COMMENT,NodeFilter.SHOW_TEXT,new Promise(t=>t(!0));const b='\n  <svg width="24" height="24" viewBox="0 0 24 24" stroke="currentColor" class="icon menu-icon">\n    <path d="M2 6h20 M2 12h20 M2 18h20" stroke-width="2" stroke-dasharray="6 1"/>\n  </svg>\n',m='\n  <svg width="24" height="24" viewBox="0 0 24 24" stroke="currentColor" class="icon close-icon">\n    <path d="M4 4L20 20 M4 20L20 4" stroke-width="2" stroke-dasharray="5 0.876" />\n  </svg>\n',v='\n  <svg viewBox="0 0 24 24" class="icon github-icon">\n    <title id="simpleicons-github-icon">GitHub icon</title>\n    <path d="M12 .297c-6.63 0-12 5.373-12 12 0 5.303 3.438 9.8 8.205 11.385.6.113.82-.258.82-.577 0-.285-.01-1.04-.015-2.04-3.338.724-4.042-1.61-4.042-1.61C4.422 18.07 3.633 17.7 3.633 17.7c-1.087-.744.084-.729.084-.729 1.205.084 1.838 1.236 1.838 1.236 1.07 1.835 2.809 1.305 3.495.998.108-.776.417-1.305.76-1.605-2.665-.3-5.466-1.332-5.466-5.93 0-1.31.465-2.38 1.235-3.22-.135-.303-.54-1.523.105-3.176 0 0 1.005-.322 3.3 1.23.96-.267 1.98-.399 3-.405 1.02.006 2.04.138 3 .405 2.28-1.552 3.285-1.23 3.285-1.23.645 1.653.24 2.873.12 3.176.765.84 1.23 1.91 1.23 3.22 0 4.61-2.805 5.625-5.475 5.92.42.36.81 1.096.81 2.22 0 1.606-.015 2.896-.015 3.286 0 .315.21.69.825.57C20.565 22.092 24 17.592 24 12.297c0-6.627-5.373-12-12-12"/>\n  </svg>\n';class w extends HTMLElement{static get is(){return"dashed-header"}constructor(){super(),this.attachShadow({mode:"open",delegatesFocus:!0}),this.navItems=[{text:"Getting started",href:"#"},{text:"Components",href:"#"},{text:"Playground",href:"#"}],this.dashProps={dashWidth:1,dashLength:4,dashRatio:1}}get navItems(){return this._navItems}set navItems(t){this._navItems=t}get logo(){return this._logo}set logo(t){this._logo=t}get iconLeft(){return this._iconLeft}set iconLeft(t){this._iconLeft=t}get iconRight(){return this._iconRight}set iconRight(t){this._iconRight=t}get dashProps(){return this._dashProps}set dashProps(t){this._dashProps=t}connectedCallback(){this.render(),this.drawDash(),this._menuButton=this.shadowRoot.querySelector("#menubutton"),this._menuButton.addEventListener("click",this._toggleMenu.bind(this)),this._nav=this.shadowRoot.querySelector("nav"),this._menuItems=[...this._nav.querySelectorAll('a[role="menuitem"]')],this._menuItems.forEach(t=>t.addEventListener("click",this._activateLink.bind(this))),this._mediaQueryList=window.matchMedia("screen and (min-width: 600px)"),this._mediaQueryList.addListener(this._mediaQueryChange.bind(this)),this._mediaQueryChange(this._mediaQueryList),document.addEventListener("click",this._closeMenu.bind(this)),window.addEventListener("resize",this.drawDash.bind(this))}disconnectedCallback(){this._menuButton.removeEventListener("click",this._toggleMenu.bind(this)),this._menuItems.forEach(t=>t.removeEventListener("click",this._activateLink.bind(this))),this._mediaQueryList.removeListener(this._mediaQueryChange.bind(this)),document.removeEventListener("click",this._closeMenu.bind(this)),window.removeEventListener("resize",this.drawDash.bind(this))}render(){const t=document.createElement("template");t.innerHTML=`\n      ${h}\n      <style>\n        :host {\n          --dashed-header-height: 56px;\n          --dashed-lightgrey: lightgrey;\n          --dashed-transition: all 0.28s cubic-bezier(0.4, 0, 0.2, 1);\n          --dashed-shadow-2:\n            0 2px 2px 0 rgba(10, 9, 9, 0.14),\n            0 1px 5px 0 rgba(0, 0, 0, 0.12),\n            0 3px 1px -2px rgba(0, 0, 0, 0.2);\n          --dashed-header-shadow: 0px 2px 2px -2px rgba(0, 0, 0, 0.7);\n\n          display: block;\n          position: sticky;\n          top: 0;\n        }\n\n        header {\n          height: var(--dashed-header-height);\n          display: grid;\n          grid-template-columns: max-content max-content auto max-content;\n        }\n\n        button {\n          display: inline-block;\n          background: none;\n          cursor: pointer;\n          border: 0;\n          outline: 0;\n          padding: 8px 16px;\n        }\n\n        nav {\n          height: 100%;\n        }\n\n        /* Mobile navlist */\n        nav.sidebar {\n          position: fixed;\n          top: var(--dashed-header-height);\n          left: 0;\n          width: 60%;\n          height: 100%;\n          background: var(--dashed-lightgrey);\n          transition: var(--dashed-transition);\n          box-shadow: var(--dashed-shadow-2);\n          transform: translate3d(-100%, 0, 0);\n          will-change: transform;\n          z-index: 2;\n        }\n\n        nav.sidebar.open {\n          transform: translateX(0);\n        }\n\n        nav ul {\n          list-style: none;\n          margin: 0;\n          padding: 0;\n          width: 100%;\n          height: 100%;\n        }\n\n        ul li {\n          padding: 0 1rem;\n        }\n\n        li a:hover,\n        li a.active {\n          border-bottom-style: solid;\n          border-bottom: 2px solid inherit;\n        }\n\n        li a.active {\n          /* font-weight: bold; */\n        }\n\n        a {\n          padding-bottom: 4px;\n          text-decoration: none;\n          /* text-transform: uppercase; */\n          display: flex;\n          align-items: center;\n        }\n\n        a img.logo {\n          height: 32px;\n          margin: 4px;\n        }\n\n        svg.icon {\n          width: 24px;\n          height: 24px;\n          fill: var(--dashed-primary-color);\n          stroke: var(--dashed-primary-color);\n        }\n\n        svg.github-icon {\n          stroke: #000000;\n          fill: #000000;\n        }\n\n        @media screen and (min-width: 600px) {\n          .header {\n            grid-template-columns: max-content auto max-content max-content;\n          }\n\n          button#menubutton {\n            display: none;\n          }\n\n          /* Desktop navlist */\n          nav.topbar ul {\n            display: flex;\n            align-items: center;\n            justify-content: flex-end;\n          }\n        }\n      </style>\n      <header>\n        <button id="menubutton"\n          aria-expanded="false"\n          aria-controls="menu"\n          aria-label="Menu button">\n            ${b}\n        </button>\n        <a href="#">\n          <img class="logo" src="/src/assets/img/logo.png" alt="Dashedjs logo">\n          <h1 class="logo-text"></h1>\n        </a>\n        <div></div>\n        <nav class="sidebar" role="navigation">\n          <ul id="menu" role="menu" aria-labelledby="menubutton">\n            ${this.navItems.map(t=>`\n                <li role="none">\n                  <a role="menuitem" href="${t.href}">\n                  ${t.text}\n                  </a>\n                </li>`).join(" ")}\n          </ul>\n        </nav>\n        <button role="search" aria-label="search button">${v}</button>\n      </header>\n      <svg class="dash" filter="url(#shadow2)">\n        <rect class="background" />\n        <line class="border-bottom" />\n        <filter id="shadow2">\n          <feDropShadow dx="2" dy="2" stdDeviation="2" flood-opacity="0.9" />\n        </filter>\n      </svg>\n    `,this.shadowRoot.appendChild(t.content.cloneNode(!0))}drawDash(){const t=this.shadowRoot.querySelector("svg.dash"),e=t.querySelector(".border-bottom"),{width:s,height:i}=this.getBoundingClientRect();n(e,{width:s,height:i},this.dashProps);const o=t.querySelector(".background");o.setAttribute("width",`${s}`),o.setAttribute("height",`${i-this.dashProps.dashWidth/2}`)}_toggleMenu(t){this._nav.classList.contains("open")?this._closeMenu(t):this._openMenu(t)}_openMenu(t){t.stopPropagation(),this._nav.classList.add("open"),this._menuButton.setAttribute("aria-expanded","true")}_closeMenu(t){t.target!=this&&this._nav.classList.contains("open")&&(t.stopPropagation(),this._nav.classList.remove("open"),this._menuButton.setAttribute("aria-expanded","false"))}_activateLink(t){const e=this.shadowRoot.querySelector(".active");e&&e.classList.remove("active"),t.target.classList.add("active"),this._closeMenu(t)}_mediaQueryChange(t){t.matches?(this._nav.classList.remove("sidebar"),this._nav.classList.add("topbar")):(this._nav.classList.remove("topbar"),this._nav.classList.add("sidebar"))}}customElements.define("dashed-header",w);class f extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open",delegatesFocus:!0}),this._firstRender=!0}get name(){return this.getAttribute("name")}set name(t){this.setAttribute("name",t)}get src(){return this.getAttribute("src")}set src(t){this.setAttribute("src",t)}get size(){return this.getAttribute("size")}set size(t){this.setAttribute("size",t)}get ariaLabel(){return this.hasAttribute("aria-label")}set ariaLabel(t){this.setAttribute("aria-label",t)}get ariaLabelledBy(){return this.hasAttribute("aria-labelledby")}set ariaLabelledBy(t){this.setAttribute("aria-labelledby",t)}get dashProps(){return this._dashProps}set dashProps(t){this._dashProps=t}connectedCallback(){this.render();const t=new MutationObserver(t=>{"childList"===t[0].type&&this.dispatchEvent(new CustomEvent("iconloaded"))});try{t.observe(this.shadowRoot,{childList:!0})}catch(e){t.observe(this,{childList:!0})}this._firstRender=!1}static get observedAttributes(){return["name","src","size"]}attributeChangedCallback(t,e,n){this._firstRender||this.drawDash()}async render(){const t=await this.fetchIcon(),e=document.createElement("template");e.innerHTML=`\n      <style>\n        :host {\n          display: inline-flex;\n          align-items: center;\n          justify-content: center;\n          cursor: pointer;\n          outline: none;\n          width: 24px;\n          height: 24px;\n        }\n\n        :host-context(dashed-button),\n        :host-context(dashed-button) svg {\n          width: 16px;\n          height: 16px;\n        }\n\n        :host-context(dashed-tag),\n        :host-context(dashed-tag) svg {\n          width: 12px;\n          height: 12px;\n        }\n\n        :host-context(dashed-fab),\n        :host-context(dashed-fab) svg {\n          width: 18px;\n          height: 18px;\n        }\n        \n        span {\n          display: inline-flex;\n          align-items: center;\n          justify-content: center;\n          width: 100%;\n          height: 100%;\n        }\n      </style>\n      <span>${t}</span>\n    `,this.shadowRoot.appendChild(e.content.cloneNode(!0))}fetchIcon(){const t=this.name?`/node_modules/@dashedjs/dashed-icons/${this.name}.svg`:this.src;return fetch(t).then(e=>{if(200!==e.status)throw new Error(`Error code ${e.status}, failed to load icon: ${t}`);return e.text()})}}customElements.define("dashed-icon",f);class y extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open",delegatesFocus:!0}),this.dashProps={dashWidth:1,dashLength:6,dashRatio:.15}}get disabled(){return this.hasAttribute("disabled")}set disabled(t){Boolean(t)?this.setAttribute("disabled",""):this.removeAttribute("disabled")}get dashProps(){return this._dashProps}set dashProps(t){this._dashProps=t}connectedCallback(){this.render(),this.drawDash()}render(){const t=document.createElement("template");t.innerHTML=`\n      ${h}\n      <style>\n        :host {\n          --dashed-input-dimension: 24px;\n\n          display: inline-flex;\n          align-items: center;\n          justify-content: center;\n          position: relative;\n          cursor: inherit;\n          outline: none;\n          min-width: 96px;\n          min-height: 24px;\n        }\n\n        .input-container {\n          display: inline-block;\n          position: relative;\n          outline: none;\n          /* width: 100%; */\n          /* height: 100%; */\n        }\n\n        input {\n          margin: 5px;\n          padding: 5px;\n          box-sizing: border-box;\n          border: none;\n          outline: none;\n          /* max-width: 100%; */\n          height: 100%;\n          background: var(--dashed-fill-color);\n        }\n      </style>\n      <label for="input"><slot></slot></label>\n      <div class="input-container">\n        <input id="input" />\n        <svg class="dash">\n          <rect class="border" />\n        </svg>\n      </div>\n    `,this.shadowRoot.appendChild(t.content.cloneNode(!0))}drawDash(){const t=this.shadowRoot.querySelector("svg.dash").querySelector(".border"),{width:e,height:n}=this.shadowRoot.querySelector(".input-container").getBoundingClientRect();i(t,{width:e,height:n,borderRadius:5},this.dashProps)}}customElements.define("dashed-input",y);class x extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open",delegatesFocus:!0}),this.dashProps={dashWidth:4,dashLength:8,dashRatio:.2}}static get properties(){return{disabled:Boolean,role:String,dashProps:Object}}get disabled(){return this.hasAttribute("disabled")}set disabled(t){Boolean(t)?this.setAttribute("disabled",""):this.removeAttribute("disabled")}get role(){return this.getAttribute("role")}set role(t){this.setAttribute("role","")}get dashProps(){return this._dashProps}set dashProps(t){this._dashProps=t}connectedCallback(){this.render(),this.drawDash()}render(){const t=document.createElement("template");t.innerHTML=`\n      ${h}\n      <style>\n        :host {\n          display: inline-flex;\n          align-items: center;\n          justify-content: center;\n          cursor: pointer;\n          outline: none;\n          position: relative;\n        }\n\n        :host(:hover) link {\n          color: var(--dashed-danger-color);\n        }\n\n        a {\n          display: inline-block;\n          cursor: inherit;\n          text-align: center;\n          text-decoration: none;\n          outline: none;\n          padding-bottom: 4px;\n          font-size: 16px;\n          position: relative;\n          transition: color 50ms ease-in-out;\n          width: 100%;\n        }\n      </style>\n      <a href="#" @click="${t=>console.log(t)}">\n        <slot></slot>\n        <svg class="dash">\n          <rect class="background" />\n          <line class="border-bottom" />\n        </svg>\n      </a>\n    `,this.shadowRoot.appendChild(t.content.cloneNode(!0))}drawDash(){const t=this.shadowRoot.querySelector("svg.dash"),e=t.querySelector(".border-bottom"),{width:s,height:i}=this.getBoundingClientRect();n(e,{width:s,height:i},this.dashProps);const o=t.querySelector(".background");o.setAttribute("width",`${s}`),o.setAttribute("height",`${i-this.dashProps.dashWidth/2}`)}}customElements.define("dashed-link",x);class _ extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open",delegatesFocus:!0}),this.dashProps={dashWidth:2,dashLength:10,dashRatio:.1}}connectedCallback(){this.render(),this.drawDash(),window.addEventListener("resize",this.drawDash.bind(this))}disconnectedCallback(){window.removeEventListener("resize",this.drawDash.bind(this))}render(){const t=document.createElement("template");t.innerHTML=`\n      ${h}\n      <style>\n        :host {\n          --dashed-notification-min-width: 256px;\n          --dashed-notification-max-width: 512px;\n          --dashed-notification-min-height: 48px;\n          --dashed-notification-padding: 8px;\n\n          display: inline-flex;\n          align-items: center;\n          justify-content: center;\n          position: relative;\n          cursor: inherit;\n          outline: none;\n          min-height: var(--dashed-notification-min-height);\n          min-width: var(--dashed-notification-min-width);\n          max-width: var(--dashed-notification-max-width);\n        }\n\n        .notification {\n          display: grid;\n          grid-template-columns: 32px auto 32px;\n          justify-items: center;\n          align-items: center;\n          position: relative;\n          width: 100%;\n          height: 100%;\n          padding: var(--dashed-notification-padding);\n        }\n\n        .notification__icon {\n          /* display: inline-block; */\n        }\n\n        .notification__message {\n        }\n\n        .notification__button {\n          display: inline-block;\n          cursor: pointer;\n          background: none;\n          border: none;\n          width: 32px;\n          height: 32px;\n          margin: 0;\n        }\n      </style>\n      <div class="notification">\n        <span class="notification__icon">ico</span>\n        <div class="notification__message">Here is an example of notification.</div>\n        <button class="notification__button">x</button>\n        <svg class="dash">\n          <rect class="border" />\n        </svg>\n      </div>\n    `,this.shadowRoot.appendChild(t.content.cloneNode(!0))}drawDash(){const t=this.shadowRoot.querySelector("svg.dash").querySelector(".border"),{width:e,height:n}=this.getBoundingClientRect();i(t,{width:e,height:n,borderRadius:this.rounded?(n-this.dashProps.dashWidth)/2:0},this.dashProps)}}customElements.define("dashed-notification",_);class k extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open",delegatesFocus:!0}),this.dashProps={dashWidth:2,dashLength:4,dashRatio:.5}}get disabled(){return this.hasAttribute("disabled")}set disabled(t){Boolean(t)?this.setAttribute("disabled",""):this.removeAttribute("disabled")}get checked(){return this.hasAttribute("checked")}set checked(t){Boolean(t)?this.setAttribute("checked",""):this.removeAttribute("checked")}get dashProps(){return this._dashProps}set dashProps(t){this._dashProps=t}connectedCallback(){this.render(),this.drawDash()}render(){const t=document.createElement("template");t.innerHTML=`\n      ${h}\n      <style>\n        :host {\n          display: inline-flex;\n          align-items: center;\n          justify-content: center;\n          position: relative;\n          cursor: inherit;\n          outline: none;\n          min-width: 48px;\n        }\n\n        .radio-container {\n          display: inline-block;\n          position: relative;\n          width: 24px;\n          height: 24px;\n        }\n\n        input[type="radio"] {\n          margin: 0;\n          width: 100%;\n          height: 100%;\n          opacity: 0;\n        }\n  \n        svg.dash .outer-circle {\n          stroke: var(--dashed-primary-color);\n          fill: var(--dashed-fill-color);\n        }\n  \n        svg.dash .inner-circle {\n          fill: var(--dashed-danger-color);\n        }\n\n        input[type="radio"]:not(:checked) ~ svg.dash .inner-circle {\n          opacity: 0;\n        }\n\n        input[type="radio"]:checked ~ svg.dash .inner-circle {\n          opacity: 1;\n        }\n      </style>\n      <div class="radio-container">\n        <input type="radio" id="radio" />\n        <svg class="dash">\n          <circle class="outer-circle" />\n          <circle class="inner-circle" />\n        </svg>\n      </div>\n      <label for="radio"><slot></slot></label>\n    `,this.shadowRoot.appendChild(t.content.cloneNode(!0))}drawDash(){const e=this.shadowRoot.querySelector("svg.dash"),[n,s]=[24,24];t(e.querySelector(".outer-circle"),{width:n,height:s},this.dashProps);const i=e.querySelector(".inner-circle");i.setAttribute("cx",`${n/2}`),i.setAttribute("cy",`${s/2}`),i.setAttribute("r","5")}}customElements.define("dashed-radio",k);class A extends HTMLElement{static get properties(){return{disabled:Boolean,value:String,dashProps:Object}}constructor(){super(),this.attachShadow({mode:"open",delegatesFocus:!0}),this.dashProps={dashWidth:2,dashLength:10,dashRatio:.3}}get disabled(){return this.hasAttribute("disabled")}set disabled(t){Boolean(t)?this.setAttribute("disabled",""):this.removeAttribute("disabled")}get value(){return this.getAttribute("value")}set value(t){this.setAttribute("value",t)}get dashProps(){return this._dashProps}set dashProps(t){this._dashProps=t}connectedCallback(){this.render(),this.drawDash()}render(){const t=document.createElement("template");t.innerHTML=`\n      ${h}\n      <style>\n        :host {\n          --dashed-select-min-width: 96px;\n          --dashed-select-min-height: 24px;\n\n          display: inline-flex;\n          align-items: center;\n          justify-content: center;\n          position: relative;\n          cursor: inherit;\n          outline: none;\n          min-width: var(--dashed-select-min-width);\n          min-height: var(--dashed-select-min-height);\n        }\n\n        .select-container {\n          display: inline-block;\n          position: relative;\n          width: 100%;\n          height: 100%;\n        }\n\n        select {\n          border: none;\n          outline: none;\n          padding-right: 12px;\n          margin-bottom: 4px;\n          background: transparent;\n          cursor: pointer;\n          width: 100%;\n          height: 100%;\n          appearance: none;\n          -webkit-appearance: none;\n          -moz-appearance: none;\n        }\n  \n        svg.dash .caret {\n          stroke: var(--dashed-primary-color);\n        }\n      </style>\n      <label for="select"><slot></slot></label>\n      <div class="select-container">\n        <select id="select">\n          <option value="1">Option 1</option>\n          <option value="3">Option 3</option>\n          <option value="2">Option 2</option>\n        </select>\n        <svg class="dash">\n          <rect class="background" />\n          <path class="caret" />\n          <line class="border-bottom" />\n        </svg>\n      </div>\n    `,this.shadowRoot.appendChild(t.content.cloneNode(!0))}drawDash(){const t=this.shadowRoot.querySelector("svg.dash"),e=t.querySelector(".border-bottom"),{width:s,height:i}=this.shadowRoot.querySelector(".select-container").getBoundingClientRect();n(e,{width:s,height:i},this.dashProps);const o=t.querySelector(".caret");o.setAttribute("stroke-width",`${1.8*this.dashProps.dashWidth}`),o.setAttribute("d",`M${s-12} 8l4 4l4 -4`);const a=t.querySelector(".background");a.setAttribute("width",`${s}`),a.setAttribute("height",`${i-this.dashProps.dashWidth/2}`)}}customElements.define("dashed-select",A);class L extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open",delegatesFocus:!0}),this.min=0,this.max=100,this.value=0,this.step=1,this.dashProps={dashWidth:2,dashLength:2,dashRatio:.5}}get disabled(){return this.hasAttribute("disabled")}set disabled(t){Boolean(t)?this.setAttribute("disabled",""):this.removeAttribute("disabled")}get min(){return this.getAttribute("min")}set min(t){this.setAttribute("min",t)}get max(){return this.getAttribute("max")}set max(t){this.setAttribute("max",t)}get value(){return this.getAttribute("value")}set value(t){this.setAttribute("value",t)}get step(){return this.hasAttribute("step")}set step(t){this.setAttribute("step",t)}get dashProps(){return this._dashProps}set dashProps(t){this._dashProps=t}connectedCallback(){this.render(),this.drawDash(),this._nativeInput=this.shadowRoot.querySelector("input"),this._nativeInput.addEventListener("input",this._onInputHandler.bind(this))}disconnectedCallback(){this._nativeInput.removeEventListener("input",this._onInputHandler.bind(this))}render(){const t=document.createElement("template");t.innerHTML=`\n      ${h}\n      <style>\n        :host {\n          --dashed-slider-width: 192px;\n          --dashed-slider-height: 24px;\n          --dashed-slider-cursor-radius: 6px;\n          --dashed-dash-width: 2px;\n\n          display: inline-flex;\n          align-items: center;\n          position: relative;\n          cursor: inherit;\n          outline: none;\n          min-width: var(--dashed-slider-width);\n        }\n\n        :host(:focus) svg.dash .slider-cursor-focus-ring {\n          opacity: 1;\n        }\n\n        .slider-container {\n          display: inline-flex;\n          justify-content: center;\n          align-items: center;\n          position: relative;\n          width: var(--dashed-slider-width);\n          height: var(--dashed-slider-height);\n        }\n\n        input[type="range"] {\n          margin: 0;\n          width: calc(100% - var(--dashed-slider-cursor-radius));\n          cursor: pointer;\n          opacity: 0;\n        }\n  \n        svg.dash .slider-background {\n          stroke: var(--dashed-primary-color);\n        }\n  \n        svg.dash .slider-tracker {\n          stroke: var(--dashed-danger-color);\n          opacity: 0.8;\n        }\n\n        svg.dash .slider-cursor {\n          will-change: transform;\n        }\n\n        svg.dash .slider-cursor-inner {\n          fill: var(--dashed-danger-color);\n        }\n\n        svg.dash .slider-cursor-focus-ring {\n          fill: rgba(255, 0, 0, 0.5);\n          opacity: 0;\n        }\n      </style>\n      <label for="range"><slot></slot></label>\n      <div class="slider-container">\n        <input type="range" id="range" min="${this.min}" max="${this.max}"\n          step="${this.step}" value="${this.value}" />\n        <svg class="dash">\n          <line class="slider-background" />\n          <line class="slider-tracker" />\n          <g class="slider-cursor">\n            <circle class="slider-cursor-focus-ring" />\n            <circle class="slider-cursor-inner" />\n          </g>\n        </svg>\n      </div>\n    `,this.shadowRoot.appendChild(t.content.cloneNode(!0))}_onInputHandler(t){this.value=parseFloat(t.target.value);const e=(this.value-this.min)/(this.max-this.min),n=this.shadowRoot.querySelector("svg.dash");n.querySelector(".slider-cursor").style.transform=`translateX(${180*e}px)`,n.querySelector(".slider-tracker").setAttribute("x2",180*e)}drawDash(){const t=this.shadowRoot.querySelector("svg.dash"),{width:e,height:s}=this.shadowRoot.querySelector(".slider-container").getBoundingClientRect(),i=t.querySelector(".slider-cursor"),o=i.querySelector(".slider-cursor-inner");o.setAttribute("stroke-width",`${this.dashProps.dashWidth}`),o.setAttribute("cx","6"),o.setAttribute("cy",`${s/2}`),o.setAttribute("r","6");const a=i.querySelector(".slider-cursor-focus-ring");a.setAttribute("stroke-width",`${this.dashProps.dashWidth}`),a.setAttribute("cx","6"),a.setAttribute("cy",`${s/2}`),a.setAttribute("r","9");const r=t.querySelector(".slider-background"),d=e-12,h={width:d,height:s};let l={...this.dashProps};n(r,h,l),r.setAttribute("transform",`translate(6 ${-s/2})`);const c=t.querySelector(".slider-tracker");n(c,h,l),c.setAttribute("transform",`translate(6 ${-s/2})`);const u=(this.value-this.min)/(this.max-this.min);i.style.transform=`translateX(${u*d}px)`,c.setAttribute("x2",`${u*d}`)}}customElements.define("dashed-slider",L);class R extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open",delegatesFocus:!0}),this.dashProps={dashWidth:1,dashLength:6,dashRatio:.2},this._firstRender=!0}get disabled(){return this.hasAttribute("disabled")}set disabled(t){Boolean(t)?this.setAttribute("disabled",""):this.removeAttribute("disabled")}get dashProps(){return this._dashProps}set dashProps(t){this._dashProps=t}connectedCallback(){this.render(),this.updateIcon(),this._firstRender=!1,this._nativeButton=this.shadowRoot.querySelector("button"),this._nativeButton.addEventListener("click",this._toggleTag.bind(this))}updateIcon(){this._icon=this.shadowRoot.querySelector('slot[name="icon"]').assignedNodes()[0],this._icon&&"dashed-icon"===this._icon.localName?this._icon.addEventListener("iconloaded",this.drawDash.bind(this)):this.drawDash()}disconnectedCallback(){this._icon&&this._icon.removeEventListener("iconloaded",this.drawDash.bind(this)),this._nativeButton.remove("click",this._toggleTag.bind(this))}render(){const t=document.createElement("template");t.innerHTML=`\n      ${h}\n      <style>\n        :host {\n          display: inline-block;\n          cursor: pointer;\n          outline: none;\n          position: relative;\n        }\n\n        button {\n          min-width: 32px;\n          min-height: 24px;\n          display: inline-flex;\n          align-items: center;\n          justify-content: center;\n          background: none;\n          cursor: inherit;\n          border: none;\n          outline: none;\n          padding: 4px 10px;\n          font-size: 12px;\n          position: relative;\n          transition: color 50ms ease-in-out;\n        }\n\n        button.active {\n          color: var(--dashed-danger-color);\n        }\n\n        :host ::slotted(dashed-icon[slot="icon"]),\n        :host ::slotted(svg) {\n          stroke: currentColor;\n          padding-left: 4px;\n        }\n      </style>\n      <button type="button">\n        <slot></slot>\n        <slot name="icon"></slot>\n        <svg class="dash">\n          <rect class="border" />\n        </svg>\n      </button>\n    `,this.shadowRoot.appendChild(t.content.cloneNode(!0))}_toggleTag(t){this._nativeButton.classList.toggle("active")}drawDash(){const t=this.shadowRoot.querySelector("svg.dash").querySelector(".border"),{width:e,height:n}=this.getBoundingClientRect();i(t,{width:e,height:n,borderRadius:(n-this.dashProps.dashWidth)/2},this.dashProps)}}customElements.define("dashed-tag",R);class P extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open",delegatesFocus:!0}),this.dashProps={dashWidth:2,dashLength:4,dashRatio:.5}}get disabled(){return this.hasAttribute("disabled")}set disabled(t){Boolean(t)?this.setAttribute("disabled",""):this.removeAttribute("disabled")}get checked(){return this.hasAttribute("checked")}set checked(t){Boolean(t)?this.setAttribute("checked",""):this.removeAttribute("checked")}get dashProps(){return this._dashProps}set dashProps(t){this._dashProps=t}connectedCallback(){this.render(),this.drawDash()}render(){const t=document.createElement("template");t.innerHTML=`\n      ${h}\n      <style>\n        :host {\n          --dashed-toggle-width: 48px;\n          --dashed-toggle-height: 24px;\n          --dashed-dash-width: 2px;\n\n          display: inline-flex;\n          align-items: center;\n          justify-content: center;\n          position: relative;\n          cursor: pointer;\n          outline: none;\n          min-width: 48px;\n        }\n\n        .toggle-container {\n          display: inline-flex;\n          position: relative;\n          width: var(--dashed-toggle-width);\n          height: var(--dashed-toggle-height);\n        }\n\n        label {\n          display: inline-flex;\n          align-items: center;\n          width: 100%;\n          height: 100%;\n        }\n\n        input[type="checkbox"] {\n          margin: 0;\n          width: var(--dashed-toggle-width);\n          height: var(--dashed-toggle-height);\n          cursor: pointer;\n          opacity: 0;\n        }\n  \n        svg.dash .toggle-background {\n          stroke: var(--dashed-primary-color);\n          fill: var(--dashed-fill-color);\n        }\n  \n        svg.dash .toggle-switcher {\n          fill: var(--dashed-primary-color);\n          transition: transform 100ms ease-in-out;\n          will-change: transform;\n        }\n\n        input[type="checkbox"]:checked ~ svg.dash .toggle-switcher {\n          transform: translateX(var(--dashed-toggle-height));\n          fill: var(--dashed-danger-color);\n        }\n\n        input[type="checkbox"]:not(:checked) ~ svg.dash .toggle-switcher {\n          transform: translateX(- var(--dashed-toggle-height));\n        }\n      </style>\n      <div class="toggle-container">\n        <input type="checkbox" id="toggle" />\n        <svg class="dash">\n          <rect class="toggle-background" />\n          <circle class="toggle-switcher" />\n        </svg>\n      </div>\n      <label for="toggle"><slot></slot></label>\n    `,this.shadowRoot.appendChild(t.content.cloneNode(!0))}drawDash(){const t=this.shadowRoot.querySelector("svg.dash"),e=t.querySelector(".toggle-background"),[n,s]=[48,24],[o,a]=[6,10];i(e,{width:n-o,height:s-a,borderRadius:(s-a-this.dashProps.dashWidth)/2},this.dashProps),e.setAttribute("transform",`translate(${o/2} ${a/2})`);const r=t.querySelector(".toggle-switcher");r.setAttribute("stroke-width",`${this.dashProps.dashWidth}`),r.setAttribute("cx",`${s/2}`),r.setAttribute("cy",`${s/2}`),r.setAttribute("r",`${(s-this.dashProps.dashWidth)/2}`)}}customElements.define("dashed-toggle",P);export{l as DashedButton,c as DashedCard,u as DashedCheckbox,p as DashedFab,g as DashedFooter,w as DashedHeader,f as DashedIcon,y as DashedInput,x as DashedLink,_ as DashedNotification,k as DashedRadio,A as DashedSelect,L as DashedSlider,h as dashedStyles,R as DashedTag,P as DashedToggle,t as drawDashedCircle,n as drawDashedLine,i as drawDashedRect,b as menuIcon,m as closeIcon,v as githubIcon};
