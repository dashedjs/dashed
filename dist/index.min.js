function t(t,e,n,s="0"){const[i,a,r,o]=[t,e,n,s].map(t=>parseFloat(t)),d=i+o,h=i+o;return`url("data:image/svg+xml;utf8,${`\n    <svg\n      xmlns='http://www.w3.org/2000/svg'\n      width='${r+a+2*i+2*o}'\n      height='${r+a+2*i+2*o}'\n      viewBox='0 0 ${r+a+2*i+2*o} ${r+a+2*i+2*o}'\n      stroke-width='${i}'\n      stroke='blue'>\n        <path\n          stroke-width='${i}'\n          d='M${i+o+r/2} ${i/2}h${a}m${r/2+o+i/2} ${i/2+o+r/2}v${a}m${-i/2-o-r/2} ${r/2+o+i/2}h${-a}m${-r/2-o-i/2} ${-i/2-o-r/2}v${-a}'/>\n\n        ${o>0?`<path\n              fill='none'\n              d='M${i/2} ${i+o-r/2}a${o} ${o} 0 0 1 ${i/2+o-r/2} ${-o-i/2+r/2}m${a+2*r} 0a${o} ${o} 0 0 1 ${o+i/2-r/2} ${i/2+o-r/2}m0 ${a+2*r}a${o} ${o} 0 0 1 ${-i/2-o+r/2} ${o+i/2-r/2}m${-a-2*r} 0a${o} ${o} 0 0 1 ${-o-i/2+r/2} ${-i/2-o+r/2}'/>`:""}\n    </svg>`.replace(/\n|\r|\t/gm,"")}") ${d} / ${h} round`}const e='\n  <style title="Common styles">\n    :host{\n      --dashed-primary-color: rgba(54, 54, 231, 1);\n      --dashed-primary-light-color: rgba(54, 54, 231, 0.15);\n\n      --dashed-danger-color: rgba(250, 50, 50, 1);\n      --dashed-danger-light-color: rgba(250, 50, 50, 0.15);\n\n      --dashed-success-color: rgba(31, 141, 87, 1);\n      --dashed-success-light-color: rgba(31, 141, 87, 0.15);\n\n      --dashed-fill-color: var(--dashed-primary-light-color);\n      --dashed-outline-color: rgba(129, 129, 193);\n      z-index: 1;\n    }\n\n    :host(:focus) > * {\n      outline: 1px solid var(--dashed-outline-color);\n      outline-offset: 1px;\n    }\n\n    :host([disabled]) {\n      opacity: 0.6;\n      pointer-events: none;\n    }\n\n    svg.dash {\n      position: absolute;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      fill: none;\n      z-index: -1;\n    }\n\n    svg.dash .border {\n      stroke: var(--dashed-primary-color);\n      fill: var(--dashed-fill-color);\n    }\n\n    svg.dash .border-bottom {\n      stroke: var(--dashed-primary-color);\n    }\n\n    svg.dash .background {\n      fill: var(--dashed-fill-color);\n    }\n  </style>\n';class n extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open",delegatesFocus:!0}),this.borderRadius="0",this.dashWidth="2",this.dashLength="8",this.dashSpacing="2.4"}get disabled(){return this.hasAttribute("disabled")}set disabled(t){Boolean(t)?this.setAttribute("disabled",""):this.removeAttribute("disabled")}get rounded(){return this.hasAttribute("rounded")}set rounded(t){Boolean(t)?this.setAttribute("rounded",""):this.removeAttribute("rounded")}get borderRadius(){return this.getAttribute("border-radius")}set borderRadius(t){this.setAttribute("border-radius",t)}get dashWidth(){return this.getAttribute("dash-width")}set dashWidth(t){this.setAttribute("dash-width",t)}get dashLength(){return this.getAttribute("dash-length")}set dashLength(t){this.setAttribute("dash-length",t)}get dashSpacing(){return this.getAttribute("dash-spacing")}set dashSpacing(t){this.setAttribute("dash-spacing",t)}connectedCallback(){this.render()}static get observedAttributes(){return["rounded"]}render(){const n=document.createElement("template");n.innerHTML=`\n      ${e}\n      <style>\n        :host {\n          display: inline-block;\n          cursor: pointer;\n          outline: none;\n          position: relative;\n          font-size: 14px;\n        }\n\n        :host(:hover) {\n          color: var(--dashed-primary-color);\n          --dashed-fill-color: var(--dashed-primary-light-color);\n        }\n\n        button {\n          min-width: 48px;\n          min-height: 32px;\n          display: inline-flex;\n          align-items: center;\n          justify-content: center;\n          background: none;\n          cursor: inherit;\n          color: inherit;\n          outline: none;\n          padding: 4px 12px;\n          font-size: inherit;\n          position: relative;\n          transition: color 50ms ease-in-out;\n\n          border: ${this.dashWidth}px solid;\n          border-image: ${t(this.dashWidth,this.dashLength,this.dashSpacing,this.borderRadius)};\n        }\n\n        button::before {\n          content: "";\n          position: absolute;\n          top: 0;\n          left: 0;\n          width: 100%;\n          height: 100%;\n          border-radius: ${this.borderRadius}px;\n          background: var(--dashed-primary-light-color);\n        }\n\n        :host ::slotted([slot="icon"]) {\n          stroke: currentColor;\n          padding-right: 4px;\n        }\n      </style>\n      <button type="button">\n        <slot name="icon"></slot>\n        <slot></slot>\n      </button>\n    `,this.shadowRoot.appendChild(n.content.cloneNode(!0))}}customElements.define("dashed-button",n);class s extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open",delegatesFocus:!0}),this.borderRadius="16",this.dashWidth="2",this.dashLength="20",this.dashSpacing="2"}get borderRadius(){return this.getAttribute("border-radius")}set borderRadius(t){this.setAttribute("border-radius",t)}get dashWidth(){return this.getAttribute("dash-width")}set dashWidth(t){this.setAttribute("dash-width",t)}get dashLength(){return this.getAttribute("dash-length")}set dashLength(t){this.setAttribute("dash-length",t)}get dashSpacing(){return this.getAttribute("dash-spacing")}set dashSpacing(t){this.setAttribute("dash-spacing",t)}connectedCallback(){this.render()}render(){const n=document.createElement("template");n.innerHTML=`\n      ${e}\n      <style>\n        :host {\n          display: inline-block;\n          position: relative;\n          cursor: inherit;\n          outline: none;\n        }\n\n        .card {\n          display: inline-block;\n          position: relative;\n          min-width: 256px;\n          padding: 10px;\n\n          border: ${this.dashWidth}px solid;\n          border-image: ${t(this.dashWidth,this.dashLength,this.dashSpacing,this.borderRadius)};\n        }\n\n        .card::before {\n          z-index: -1;\n          content: "";\n          position: absolute;\n          top: 0;\n          left: 0;\n          width: 100%;\n          height: 100%;\n          border-radius: ${this.borderRadius}px;\n          background: var(--dashed-primary-light-color);\n        }\n\n        .card__title {\n        }\n\n        .card__content {\n        }\n\n        .card__footer {\n          display: flex;\n          justify-content: flex-end;\n        }\n\n        .card__footer__button {\n          display: inline-block;\n          cursor: pointer;\n        }\n      </style>\n      <div class="card">\n        <h4 class="card__title">Card title</h3>\n        <h5 class="card__subtitle">Card subtitle</h5>\n        <div class="card__content">\n          This is the card content. This is a text divlacehoder.\n          <p>It can grow at will</p>\n        </div>\n        <div class="card__footer">\n          <small>Here the card footer</small>\n          <button class="card__footer__button">button1</button>\n          <button class="card__footer__button">button2</button>\n        </div>\n      </div>\n    `,this.shadowRoot.appendChild(n.content.cloneNode(!0))}}customElements.define("dashed-card",s);class i extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open",delegatesFocus:!0}),this.dashProps={dashWidth:2,dashLength:4,dashRatio:.5},this.borderRadius="0",this.dashWidth="2",this.dashLength="4",this.dashSpacing="2"}get disabled(){return this.hasAttribute("disabled")}set disabled(t){Boolean(t)?this.setAttribute("disabled",""):this.removeAttribute("disabled")}get checked(){return this.hasAttribute("checked")}set checked(t){Boolean(t)?this.setAttribute("checked",""):this.removeAttribute("checked")}get borderRadius(){return this.getAttribute("border-radius")}set borderRadius(t){this.setAttribute("border-radius",t)}get dashWidth(){return this.getAttribute("dash-width")}set dashWidth(t){this.setAttribute("dash-width",t)}get dashLength(){return this.getAttribute("dash-length")}set dashLength(t){this.setAttribute("dash-length",t)}get dashSpacing(){return this.getAttribute("dash-spacing")}set dashSpacing(t){this.setAttribute("dash-spacing",t)}connectedCallback(){this.render()}render(){const n=document.createElement("template");n.innerHTML=`\n      ${e}\n      <style>\n        :host {\n          display: inline-block;\n          position: relative;\n          cursor: inherit;\n          outline: none;\n        }\n\n        .checkbox-container {\n          display: inline-block;\n          position: relative;\n          width: 24px;\n          height: 24px;\n\n          border: ${this.dashWidth}px solid;\n          border-image: ${t(this.dashWidth,this.dashLength,this.dashSpacing,this.borderRadius)};\n        }\n\n        .checkbox-container::before {\n          content: "";\n          position: absolute;\n          top: 0;\n          left: 0;\n          width: 100%;\n          height: 100%;\n          border-radius: ${this.borderRadius}px;\n          background: var(--dashed-primary-light-color);\n        }\n\n        input[type="checkbox"] {\n          margin: 0;\n          width: 100%;\n          height: 100%;\n          opacity: 0;\n        }\n\n        svg.dash .checkmark {\n          stroke: var(--dashed-danger-color);\n          stroke-width: ${1.8*parseFloat(this.dashWidth)};\n        }\n\n        input[type="checkbox"]:not(:checked) ~ svg.dash .checkmark {\n          opacity: 0;\n        }\n\n        input[type="checkbox"]:checked ~ svg.dash .checkmark {\n          opacity: 1;\n        }\n      </style>\n      <div class="checkbox-container">\n        <input type="checkbox" id="checkbox" />\n        <svg class="dash">\n          <path class="checkmark" d='M6 12l4 4l8 -8' />\n        </svg>\n      </div>\n      <label for="checkbox"><slot></slot></label>\n    `,this.shadowRoot.appendChild(n.content.cloneNode(!0))}}customElements.define("dashed-checkbox",i);class a extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open",delegatesFocus:!0}),this.borderRadius="24",this.dashWidth="2",this.dashLength="4",this.dashSpacing="2"}get disabled(){return this.hasAttribute("disabled")}set disabled(t){Boolean(t)?this.setAttribute("disabled",""):this.removeAttribute("disabled")}get ariaLabel(){return this.hasAttribute("aria-label")}set ariaLabel(t){Boolean(t)?this.setAttribute("aria-label",t):this.removeAttribute("aria-label")}get borderRadius(){return this.getAttribute("border-radius")}set borderRadius(t){this.setAttribute("border-radius",t)}get dashWidth(){return this.getAttribute("dash-width")}set dashWidth(t){this.setAttribute("dash-width",t)}get dashLength(){return this.getAttribute("dash-length")}set dashLength(t){this.setAttribute("dash-length",t)}get dashSpacing(){return this.getAttribute("dash-spacing")}set dashSpacing(t){this.setAttribute("dash-spacing",t)}connectedCallback(){this.render()}render(){const n=`${parseFloat(this.borderRadius)-4}`,s=document.createElement("template");s.innerHTML=`\n      ${e}\n      <style>\n        :host {\n          display: inline-block;\n          cursor: pointer;\n          outline: none;\n          position: relative;\n        }\n\n        :host(:hover) button {\n          color: var(--dashed-danger-color);\n        }\n\n        .button-container {\n          display: inline-flex;\n          align-items: center;\n          justify-content: center;\n          position: relative;\n          width: 56px;\n          height: 56px;\n        }\n\n        button {\n          width: 48px;\n          height: 48px;\n          display: inline-flex;\n          align-items: center;\n          justify-content: center;\n          background: none;\n          cursor: inherit;\n          border: none;\n          outline: none;\n          position: relative;\n          transition: color 50ms ease-in-out;\n\n          border: ${this.dashWidth}px solid;\n          border-image: ${t(this.dashWidth,this.dashLength,this.dashSpacing,this.borderRadius)};\n        }\n\n        button::before {\n          content: "";\n          box-sizing: border-box;\n          position: absolute;\n          top: 0;\n          left: 0;\n          width: 100%;\n          height: 100%;\n          border-radius: ${this.borderRadius}px;\n          background: var(--dashed-primary-light-color);\n        }\n\n        button::after {\n          content: "";\n          position: absolute;\n          top: 4px;\n          left: 4px;\n          bottom: 4px;\n          right: 4px;\n\n          border: ${this.dashWidth}px solid;\n          border-image: ${t(this.dashWidth,this.dashLength,this.dashSpacing,n)};\n        }\n      </style>\n      <div class="button-container">\n        <button type="button" aria-label="${this.ariaLabel}">\n          <slot name="icon"></slot>\n        </button>\n      </div>\n    `,this.shadowRoot.appendChild(s.content.cloneNode(!0))}}customElements.define("dashed-fab",a);class r extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open",delegatesFocus:!0}),this.dashProps={dashWidth:2,dashLength:20,dashRatio:.1}}connectedCallback(){this.render()}render(){const t=document.createElement("template");t.innerHTML=`\n      ${e}\n      <style>\n        :host {\n          --dashed-footer-min-width: 256px;\n          --dashed-footer-max-width: 512px;\n\n          display: inline-flex;\n          align-items: center;\n          justify-content: center;\n          position: relative;\n          cursor: inherit;\n          outline: none;\n          min-width: var(--dashed-footer-min-width);\n          max-width: var(--dashed-footer-max-width);\n        }\n\n\n        .footer {\n          display: inline-block;\n          position: relative;\n          width: 100%;\n          height: 100%;\n          padding: 10px;\n        }\n\n        .footer__title {\n        }\n\n        .footer__content {\n        }\n\n        .footer__footer {\n          display: flex;\n          justify-content: flex-end;\n        }\n\n        .footer__footer__button {\n          display: inline-block;\n          cursor: pointer;\n        }\n      </style>\n      <div class="footer">\n        <h4 class="footer__title">Footer title</h3>\n        <h5 class="footer__subtitle">Footer subtitle</h5>\n        <div class="footer__content">\n          This is the footer content. This is a text divlacehoder.\n          <p>It can grow at will</p>\n        </div>\n        <div class="footer__footer">\n          <small>Here the footer footer</small>\n          <button class="footer__footer__button">button1</button>\n          <button class="footer__footer__button">button2</button>\n        </div>\n      </div>\n    `,this.shadowRoot.appendChild(t.content.cloneNode(!0))}}customElements.define("dashed-footer",r);const o='\n  <svg width="24" height="24" viewBox="0 0 24 24" stroke="currentColor" class="icon menu-icon">\n    <path d="M2 6h20 M2 12h20 M2 18h20" stroke-width="2" stroke-dasharray="6 1"/>\n  </svg>\n',d='\n  <svg width="24" height="24" viewBox="0 0 24 24" stroke="currentColor" class="icon close-icon">\n    <path d="M4 4L20 20 M4 20L20 4" stroke-width="2" stroke-dasharray="5 0.876" />\n  </svg>\n',h='\n  <svg viewBox="0 0 24 24" class="icon github-icon">\n    <title id="simpleicons-github-icon">GitHub icon</title>\n    <path d="M12 .297c-6.63 0-12 5.373-12 12 0 5.303 3.438 9.8 8.205 11.385.6.113.82-.258.82-.577 0-.285-.01-1.04-.015-2.04-3.338.724-4.042-1.61-4.042-1.61C4.422 18.07 3.633 17.7 3.633 17.7c-1.087-.744.084-.729.084-.729 1.205.084 1.838 1.236 1.838 1.236 1.07 1.835 2.809 1.305 3.495.998.108-.776.417-1.305.76-1.605-2.665-.3-5.466-1.332-5.466-5.93 0-1.31.465-2.38 1.235-3.22-.135-.303-.54-1.523.105-3.176 0 0 1.005-.322 3.3 1.23.96-.267 1.98-.399 3-.405 1.02.006 2.04.138 3 .405 2.28-1.552 3.285-1.23 3.285-1.23.645 1.653.24 2.873.12 3.176.765.84 1.23 1.91 1.23 3.22 0 4.61-2.805 5.625-5.475 5.92.42.36.81 1.096.81 2.22 0 1.606-.015 2.896-.015 3.286 0 .315.21.69.825.57C20.565 22.092 24 17.592 24 12.297c0-6.627-5.373-12-12-12"/>\n  </svg>\n';class l extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open",delegatesFocus:!0}),this.navItems=[{text:"Getting started",href:"#"},{text:"Components",href:"#"},{text:"Playground",href:"#"}],this.dashWidth="1",this.dashLength="4",this.dashSpacing="4"}get navItems(){return this._navItems}set navItems(t){this._navItems=t}get logo(){return this._logo}set logo(t){this._logo=t}get iconLeft(){return this._iconLeft}set iconLeft(t){this._iconLeft=t}get iconRight(){return this._iconRight}set iconRight(t){this._iconRight=t}get dashWidth(){return this.getAttribute("dash-width")}set dashWidth(t){this.setAttribute("dash-width",t)}get dashLength(){return this.getAttribute("dash-length")}set dashLength(t){this.setAttribute("dash-length",t)}get dashSpacing(){return this.getAttribute("dash-spacing")}set dashSpacing(t){this.setAttribute("dash-spacing",t)}connectedCallback(){this.render(),this._menuButton=this.shadowRoot.querySelector("#menubutton"),this._menuButton.addEventListener("click",this._toggleMenu.bind(this)),this._nav=this.shadowRoot.querySelector("nav"),this._menuItems=[...this._nav.querySelectorAll('a[role="menuitem"]')],this._menuItems.forEach(t=>t.addEventListener("click",this._activateLink.bind(this))),this._mediaQueryList=window.matchMedia("screen and (min-width: 600px)"),this._mediaQueryList.addListener(this._mediaQueryChange.bind(this)),this._mediaQueryChange(this._mediaQueryList),document.addEventListener("click",this._closeMenu.bind(this))}disconnectedCallback(){this._menuButton.removeEventListener("click",this._toggleMenu.bind(this)),this._menuItems.forEach(t=>t.removeEventListener("click",this._activateLink.bind(this))),this._mediaQueryList.removeListener(this._mediaQueryChange.bind(this)),document.removeEventListener("click",this._closeMenu.bind(this))}render(){const n=document.createElement("template");n.innerHTML=`\n      ${e}\n      <style>\n        :host {\n          --dashed-header-height: 56px;\n          --dashed-lightgrey: lightgrey;\n          --dashed-transition: all 0.28s cubic-bezier(0.4, 0, 0.2, 1);\n          --dashed-shadow-2:\n            0 2px 2px 0 rgba(10, 9, 9, 0.14),\n            0 1px 5px 0 rgba(0, 0, 0, 0.12),\n            0 3px 1px -2px rgba(0, 0, 0, 0.2);\n          --dashed-header-shadow: 0px 2px 2px -2px rgba(0, 0, 0, 0.7);\n\n          display: block;\n          position: sticky;\n          top: 0;\n        }\n\n        header {\n          height: var(--dashed-header-height);\n          display: grid;\n          grid-template-columns: max-content max-content auto max-content;\n  \n          border-bottom: ${this.dashWidth}px solid;\n          border-image: ${t(this.dashWidth,this.dashLength,this.dashSpacing)};\n        }\n\n        header::before {\n          content: "";\n          position: absolute;\n          top: 0;\n          left: 0;\n          width: 100%;\n          height: 100%;\n          background: var(--dashed-primary-light-color);\n          z-index: -1;\n        }\n\n        button {\n          display: inline-block;\n          background: none;\n          cursor: pointer;\n          border: 0;\n          outline: 0;\n          padding: 8px 16px;\n        }\n\n        nav {\n          height: 100%;\n        }\n\n        /* Mobile navlist */\n        nav.sidebar {\n          position: fixed;\n          top: var(--dashed-header-height);\n          left: 0;\n          width: 60%;\n          height: 100%;\n          background: var(--dashed-lightgrey);\n          transition: var(--dashed-transition);\n          box-shadow: var(--dashed-shadow-2);\n          transform: translate3d(-100%, 0, 0);\n          will-change: transform;\n          z-index: 2;\n        }\n\n        nav.sidebar.open {\n          transform: translateX(0);\n        }\n\n        nav ul {\n          list-style: none;\n          margin: 0;\n          padding: 0;\n          width: 100%;\n          height: 100%;\n        }\n\n        ul li {\n          padding: 0 1rem;\n        }\n\n        li a:hover,\n        li a.active {\n          border-bottom-style: solid;\n          border-bottom: 2px solid inherit;\n        }\n\n        li a.active {\n          /* font-weight: bold; */\n        }\n\n        a {\n          padding-bottom: 4px;\n          text-decoration: none;\n          /* text-transform: uppercase; */\n          display: flex;\n          align-items: center;\n        }\n\n        a img.logo {\n          height: 32px;\n          margin: 4px;\n        }\n\n        svg.icon {\n          width: 24px;\n          height: 24px;\n          fill: var(--dashed-primary-color);\n          stroke: var(--dashed-primary-color);\n        }\n\n        svg.github-icon {\n          stroke: #000000;\n          fill: #000000;\n        }\n\n        @media screen and (min-width: 600px) {\n          .header {\n            grid-template-columns: max-content auto max-content max-content;\n          }\n\n          button#menubutton {\n            display: none;\n          }\n\n          /* Desktop navlist */\n          nav.topbar ul {\n            display: flex;\n            align-items: center;\n            justify-content: flex-end;\n          }\n        }\n      </style>\n      <header>\n        <button id="menubutton"\n          aria-expanded="false"\n          aria-controls="menu"\n          aria-label="Menu button">\n            ${o}\n        </button>\n        <a href="#">\n          <img class="logo" src="/src/assets/img/logo.png" alt="Dashedjs logo">\n          <h1 class="logo-text"></h1>\n        </a>\n        <div></div>\n        <nav class="sidebar" role="navigation">\n          <ul id="menu" role="menu" aria-labelledby="menubutton">\n            ${this.navItems.map(t=>`\n                <li role="none">\n                  <a role="menuitem" href="${t.href}">\n                  ${t.text}\n                  </a>\n                </li>`).join(" ")}\n          </ul>\n        </nav>\n        <button role="search" aria-label="search button">${h}</button>\n      </header>\n    `,this.shadowRoot.appendChild(n.content.cloneNode(!0))}_toggleMenu(t){this._nav.classList.contains("open")?this._closeMenu(t):this._openMenu(t)}_openMenu(t){t.stopPropagation(),this._nav.classList.add("open"),this._menuButton.setAttribute("aria-expanded","true")}_closeMenu(t){t.target!=this&&this._nav.classList.contains("open")&&(t.stopPropagation(),this._nav.classList.remove("open"),this._menuButton.setAttribute("aria-expanded","false"))}_activateLink(t){const e=this.shadowRoot.querySelector(".active");e&&e.classList.remove("active"),t.target.classList.add("active"),this._closeMenu(t)}_mediaQueryChange(t){t.matches?(this._nav.classList.remove("sidebar"),this._nav.classList.add("topbar")):(this._nav.classList.remove("topbar"),this._nav.classList.add("sidebar"))}}customElements.define("dashed-header",l);class c extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open",delegatesFocus:!0})}get name(){return this.getAttribute("name")}set name(t){this.setAttribute("name",t)}get src(){return this.getAttribute("src")}set src(t){this.setAttribute("src",t)}get size(){return this.getAttribute("size")}set size(t){this.setAttribute("size",t)}get ariaLabel(){return this.hasAttribute("aria-label")}set ariaLabel(t){this.setAttribute("aria-label",t)}get ariaLabelledBy(){return this.hasAttribute("aria-labelledby")}set ariaLabelledBy(t){this.setAttribute("aria-labelledby",t)}connectedCallback(){this.render()}static get observedAttributes(){return["name","src","size"]}async render(){const t=await this.fetchIcon(),e=document.createElement("template");e.innerHTML=`\n      <style>\n        :host {\n          display: inline-flex;\n          align-items: center;\n          justify-content: center;\n          cursor: pointer;\n          outline: none;\n          width: 24px;\n          height: 24px;\n        }\n\n        :host-context(dashed-button),\n        :host-context(dashed-button) svg {\n          width: 16px;\n          height: 16px;\n        }\n\n        :host-context(dashed-tag),\n        :host-context(dashed-tag) svg {\n          width: 12px;\n          height: 12px;\n        }\n\n        :host-context(dashed-fab),\n        :host-context(dashed-fab) svg {\n          width: 18px;\n          height: 18px;\n        }\n        \n        span {\n          display: inline-flex;\n          align-items: center;\n          justify-content: center;\n          width: 100%;\n          height: 100%;\n        }\n      </style>\n      <span>${t}</span>\n    `,this.shadowRoot.appendChild(e.content.cloneNode(!0))}fetchIcon(){const t=this.name?`/node_modules/@dashedjs/dashed-icons/${this.name}.svg`:this.src;return fetch(t).then(e=>{if(200!==e.status)throw new Error(`Error code ${e.status}, failed to load icon: ${t}`);return e.text()})}}customElements.define("dashed-icon",c);class u extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open",delegatesFocus:!0}),this.borderRadius="5",this.dashWidth="1",this.dashLength="6",this.dashSpacing="0.9"}get disabled(){return this.hasAttribute("disabled")}set disabled(t){Boolean(t)?this.setAttribute("disabled",""):this.removeAttribute("disabled")}get borderRadius(){return this.getAttribute("border-radius")}set borderRadius(t){this.setAttribute("border-radius",t)}get dashWidth(){return this.getAttribute("dash-width")}set dashWidth(t){this.setAttribute("dash-width",t)}get dashLength(){return this.getAttribute("dash-length")}set dashLength(t){this.setAttribute("dash-length",t)}get dashSpacing(){return this.getAttribute("dash-spacing")}set dashSpacing(t){this.setAttribute("dash-spacing",t)}connectedCallback(){this.render()}render(){const n=document.createElement("template");n.innerHTML=`\n      ${e}\n      <style>\n        :host {\n          display: inline-flex;\n          align-items: center;\n          justify-content: center;\n          position: relative;\n          cursor: inherit;\n          outline: none;\n          min-width: 96px;\n          min-height: 24px;\n        }\n\n        .input-container {\n          display: inline-block;\n          position: relative;\n\n          border: ${this.dashWidth}px solid;\n          border-image: ${t(this.dashWidth,this.dashLength,this.dashSpacing,this.borderRadius)};\n        }\n\n        input {\n          margin: 5px;\n          padding: 5px;\n          box-sizing: border-box;\n          border: none;\n          outline: none;\n          height: 100%;\n          background: var(--dashed-fill-color);\n        }\n      </style>\n      <label for="input"><slot></slot></label>\n      <div class="input-container">\n        <input id="input" />\n      </div>\n    `,this.shadowRoot.appendChild(n.content.cloneNode(!0))}}customElements.define("dashed-input",u);class g extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open",delegatesFocus:!0}),this.dashWidth="1.5",this.dashLength="8",this.dashSpacing="2"}static get properties(){return{disabled:Boolean,role:String,dashProps:Object}}get disabled(){return this.hasAttribute("disabled")}set disabled(t){Boolean(t)?this.setAttribute("disabled",""):this.removeAttribute("disabled")}get role(){return this.getAttribute("role")}set role(t){this.setAttribute("role","")}get dashWidth(){return this.getAttribute("dash-width")}set dashWidth(t){this.setAttribute("dash-width",t)}get dashLength(){return this.getAttribute("dash-length")}set dashLength(t){this.setAttribute("dash-length",t)}get dashSpacing(){return this.getAttribute("dash-spacing")}set dashSpacing(t){this.setAttribute("dash-spacing",t)}connectedCallback(){this.render()}render(){const n=document.createElement("template");n.innerHTML=`\n      ${e}\n      <style>\n        :host {\n          display: inline-block;\n          cursor: pointer;\n          outline: none;\n          position: relative;\n          font-size: 16px;\n        }\n\n        :host(:hover) {\n          color: var(--dashed-primary-color);\n          --dashed-fill-color: var(--dashed-primary-light-color);\n        }\n\n        a {\n          display: inline-block;\n          cursor: inherit;\n          text-align: center;\n          text-decoration: none;\n          color: inherit;\n          outline: none;\n          padding-bottom: 4px;\n          font-size: inherit;\n          position: relative;\n          transition: color 50ms ease-in-out;\n\n          border-bottom: ${this.dashWidth}px solid;\n          border-image: ${t(this.dashWidth,this.dashLength,this.dashSpacing)};\n        }\n      </style>\n      <a href="#">\n        <slot></slot>\n      </a>\n    `,this.shadowRoot.appendChild(n.content.cloneNode(!0))}}customElements.define("dashed-link",g);class b extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open",delegatesFocus:!0}),this.dashProps={dashWidth:2,dashLength:10,dashRatio:.1},this.borderRadius="0",this.dashWidth="1",this.dashLength="10",this.dashSpacing="4"}connectedCallback(){this.render()}render(){const n=document.createElement("template");n.innerHTML=`\n      ${e}\n      <style>\n        :host {\n          display: inline-block;\n          position: relative;\n          cursor: inherit;\n          outline: none;\n        }\n\n        .notification {\n          box-sizing: border-box;\n          min-height: 48px;\n          min-width: 128px;\n          max-width: 100%;\n          white-space: normal;\n          display: grid;\n          grid-template-columns: 32px auto 32px;\n          justify-items: center;\n          align-items: center;\n          position: relative;\n          padding: 4px;\n\n          border: ${this.dashWidth}px solid;\n          border-image: ${t(this.dashWidth,this.dashLength,this.dashSpacing,this.borderRadius)};\n        }\n\n        .notification__icon {\n          /* display: inline-block; */\n        }\n\n        .notification__message {\n        }\n\n        .notification__button {\n          display: inline-block;\n          cursor: pointer;\n          background: none;\n          border: none;\n          width: 32px;\n          height: 32px;\n          margin: 0;\n        }\n      </style>\n      <div class="notification">\n        <span class="notification__icon">ico</span>\n        <div class="notification__message">Here is an example of notification.</div>\n        <button class="notification__button">x</button>\n      </div>\n    `,this.shadowRoot.appendChild(n.content.cloneNode(!0))}}customElements.define("dashed-notification",b);class p extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open",delegatesFocus:!0}),this.borderRadius="12",this.dashWidth="2",this.dashLength="4",this.dashSpacing="2"}get disabled(){return this.hasAttribute("disabled")}set disabled(t){Boolean(t)?this.setAttribute("disabled",""):this.removeAttribute("disabled")}get checked(){return this.hasAttribute("checked")}set checked(t){Boolean(t)?this.setAttribute("checked",""):this.removeAttribute("checked")}get borderRadius(){return this.getAttribute("border-radius")}set borderRadius(t){this.setAttribute("border-radius",t)}get dashWidth(){return this.getAttribute("dash-width")}set dashWidth(t){this.setAttribute("dash-width",t)}get dashLength(){return this.getAttribute("dash-length")}set dashLength(t){this.setAttribute("dash-length",t)}get dashSpacing(){return this.getAttribute("dash-spacing")}set dashSpacing(t){this.setAttribute("dash-spacing",t)}connectedCallback(){this.render()}render(){const n=document.createElement("template");n.innerHTML=`\n      ${e}\n      <style>\n        :host {\n          display: inline-flex;\n          align-items: center;\n          justify-content: center;\n          position: relative;\n          cursor: inherit;\n          outline: none;\n        }\n\n        .radio-container {\n          display: inline-block;\n          position: relative;\n          width: 24px;\n          height: 24px;\n\n          border: ${this.dashWidth}px solid;\n          border-image: ${t(this.dashWidth,this.dashLength,this.dashSpacing,this.borderRadius)};\n        }\n\n        .radio-container::before {\n          content: "";\n          position: absolute;\n          top: 0;\n          left: 0;\n          width: 100%;\n          height: 100%;\n\n          border-radius: ${this.borderRadius}px;\n          background: var(--dashed-primary-light-color);\n        }\n\n        input[type="radio"] {\n          margin: 0;\n          width: 100%;\n          height: 100%;\n          opacity: 0;\n        }\n  \n        svg.dash .inner-circle {\n          fill: var(--dashed-danger-color);\n        }\n\n        input[type="radio"]:not(:checked) ~ svg.dash .inner-circle {\n          opacity: 0;\n        }\n\n        input[type="radio"]:checked ~ svg.dash .inner-circle {\n          opacity: 1;\n        }\n      </style>\n      <div class="radio-container">\n        <input type="radio" id="radio" />\n        <svg class="dash">\n          <circle class="inner-circle" cx="12" cy="12" r="5" />\n        </svg>\n      </svg>\n      </div>\n      <label for="radio"><slot></slot></label>\n    `,this.shadowRoot.appendChild(n.content.cloneNode(!0))}}customElements.define("dashed-radio",p);class m extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open",delegatesFocus:!0}),this.dashWidth="2",this.dashLength="10",this.dashSpacing="3.33"}get disabled(){return this.hasAttribute("disabled")}set disabled(t){Boolean(t)?this.setAttribute("disabled",""):this.removeAttribute("disabled")}get value(){return this.getAttribute("value")}set value(t){this.setAttribute("value",t)}get dashWidth(){return this.getAttribute("dash-width")}set dashWidth(t){this.setAttribute("dash-width",t)}get dashLength(){return this.getAttribute("dash-length")}set dashLength(t){this.setAttribute("dash-length",t)}get dashSpacing(){return this.getAttribute("dash-spacing")}set dashSpacing(t){this.setAttribute("dash-spacing",t)}connectedCallback(){this.render()}render(){const n=document.createElement("template");n.innerHTML=`\n      ${e}\n      <style>\n        :host {\n          display: inline-block;\n          position: relative;\n          cursor: inherit;\n          outline: none;\n        }\n\n        .select-container {\n          min-width: 96px;\n          min-height: 24px;\n          display: inline-block;\n          position: relative;\n\n          border-bottom: ${this.dashWidth}px solid;\n          border-image: ${t(this.dashWidth,this.dashLength,this.dashSpacing)};\n        }\n\n        .select-container::before {\n          content: "";\n          z-index: -1;\n          position: absolute;\n          top: 0;\n          left: 0;\n          width: 100%;\n          height: 100%;\n          background: var(--dashed-primary-light-color);\n        }\n\n        select {\n          border: none;\n          outline: none;\n          padding-right: 12px;\n          margin-bottom: 4px;\n          background: transparent;\n          cursor: pointer;\n          width: 100%;\n          height: 100%;\n          appearance: none;\n          -webkit-appearance: none;\n          -moz-appearance: none;\n        }\n  \n        svg.dash .caret {\n          stroke: var(--dashed-primary-color);\n          stroke-width: ${parseFloat(this.dashWidth)};\n        }\n      </style>\n      <label for="select"><slot></slot></label>\n      <div class="select-container">\n        <select id="select">\n          <option value="1">Option 1</option>\n          <option value="3">Option 3</option>\n          <option value="2">Option 2</option>\n        </select>\n        <svg class="dash">\n          <path class="caret" d="M0 8l4 4l4 -4" transform="translate(84, 0)" />\n        </svg>\n      </div>\n    `,this.shadowRoot.appendChild(n.content.cloneNode(!0))}}customElements.define("dashed-select",m);class v extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open",delegatesFocus:!0}),this.min="0",this.max="100",this.value="30",this.step="1",this.dashWidth="2",this.dashLength="2",this.dashSpacing="1"}get disabled(){return this.hasAttribute("disabled")}set disabled(t){Boolean(t)?this.setAttribute("disabled",""):this.removeAttribute("disabled")}get min(){return this.getAttribute("min")}set min(t){this.setAttribute("min",t)}get max(){return this.getAttribute("max")}set max(t){this.setAttribute("max",t)}get value(){return this.getAttribute("value")}set value(t){this.setAttribute("value",t)}get step(){return this.hasAttribute("step")}set step(t){this.setAttribute("step",t)}get dashWidth(){return this.getAttribute("dash-width")}set dashWidth(t){this.setAttribute("dash-width",t)}get dashLength(){return this.getAttribute("dash-length")}set dashLength(t){this.setAttribute("dash-length",t)}get dashSpacing(){return this.getAttribute("dash-spacing")}set dashSpacing(t){this.setAttribute("dash-spacing",t)}connectedCallback(){this.render(),this._nativeInput=this.shadowRoot.querySelector("input"),this._nativeInput.addEventListener("input",this._onInputHandler.bind(this))}disconnectedCallback(){this._nativeInput.removeEventListener("input",this._onInputHandler.bind(this))}render(){const[t,n,s]=[this.min,this.max,this.value].map(t=>parseFloat(t)),i=`${(s-t)/(n-t)*100}%`,a=document.createElement("template");a.innerHTML=`\n      ${e}\n      <style>\n        :host {\n          --dashed-background-width: 100%;\n          display: inline-block;\n          position: relative;\n          cursor: inherit;\n          outline: none;\n        }\n\n        :host(:focus) svg.dash .slider-cursor-focus-ring {\n          opacity: 1;\n        }\n\n        .slider-container {\n          display: inline-flex;\n          justify-content: center;\n          align-items: center;\n          position: relative;\n          min-width: 192px;\n          height: 24px;\n        }\n\n        input[type="range"] {\n          margin: 0;\n          width: calc(100% - 8px);\n          cursor: pointer;\n          opacity: 0;\n        }\n\n        svg.dash {\n          box-sizing: border-box;\n          padding: 0 8px;\n        }\n  \n        svg.dash .slider-background {\n          stroke: var(--dashed-primary-color);\n        }\n  \n        svg.dash .slider-tracker {\n          stroke: var(--dashed-danger-color);\n          opacity: 0.8;\n        }\n\n        svg.dash .slider-cursor {\n          will-change: transform;\n        }\n\n        svg.dash .slider-cursor-inner {\n          fill: var(--dashed-danger-color);\n        }\n\n        svg.dash .slider-cursor-focus-ring {\n          fill: rgba(255, 0, 0, 0.5);\n          opacity: 0;\n        }\n      </style>\n      <label for="range"><slot></slot></label>\n      <div class="slider-container">\n        <input type="range" id="range"\n          min="${this.min}" max="${this.max}" step="${this.step}" value="${this.value}" />\n        <svg class="dash" stroke-width="${this.dashWidth}">\n          <line class="slider-background" x2="100%" y2="0"  transform="translate(0, 12)"\n            stroke-dasharray="${this.dashLength} ${this.dashSpacing}" />\n          <line class="slider-tracker" x2="${i}" y2="0"  transform="translate(0, 12)"\n            stroke-dasharray="${this.dashLength} ${this.dashSpacing}" />\n          <g class="slider-cursor" style="transform: translate(calc(${i} - 6px), 0)">\n            <circle class="slider-cursor-focus-ring" cx="6" cy="12" r="9" />\n            <circle class="slider-cursor-inner" cx="6" cy="12" r="6"  />\n          </g>\n        </svg>\n      </div>\n    `,this.shadowRoot.appendChild(a.content.cloneNode(!0))}_onInputHandler(t){this.value=parseFloat(t.target.value);const[e,n,s]=[this.min,this.max,this.value].map(t=>parseFloat(t)),i=`${(s-e)/(n-e)*100}%`,a=this.shadowRoot.querySelector("svg.dash");a.querySelector(".slider-cursor").style.transform=`translateX(calc(${i} - 6px))`,a.querySelector(".slider-tracker").setAttribute("x2",i)}}customElements.define("dashed-slider",v);class x extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open",delegatesFocus:!0}),this.borderRadius="16",this.dashWidth="2",this.dashLength="8",this.dashSpacing="4"}get disabled(){return this.hasAttribute("disabled")}set disabled(t){Boolean(t)?this.setAttribute("disabled",""):this.removeAttribute("disabled")}get borderRadius(){return this.getAttribute("border-radius")}set borderRadius(t){this.setAttribute("border-radius",t)}get dashWidth(){return this.getAttribute("dash-width")}set dashWidth(t){this.setAttribute("dash-width",t)}get dashLength(){return this.getAttribute("dash-length")}set dashLength(t){this.setAttribute("dash-length",t)}get dashSpacing(){return this.getAttribute("dash-spacing")}set dashSpacing(t){this.setAttribute("dash-spacing",t)}connectedCallback(){this.render(),this._nativeButton=this.shadowRoot.querySelector("button"),this._nativeButton.addEventListener("click",this._toggleTag.bind(this))}disconnectedCallback(){this._nativeButton.remove("click",this._toggleTag.bind(this))}render(){const n=document.createElement("template");n.innerHTML=`\n      ${e}\n      <style>\n        :host {\n          display: inline-block;\n          cursor: pointer;\n          outline: none;\n          position: relative;\n          font-size: 12px;\n        }\n\n        :host(:hover) {\n          color: var(--dashed-primary-color);\n          --dashed-fill-color: var(--dashed-primary-light-color);\n        }\n\n        button {\n          min-width: 32px;\n          min-height: 24px;\n          display: inline-flex;\n          align-items: center;\n          justify-content: center;\n          background: none;\n          cursor: inherit;\n          color: inherit;\n          outline: none;\n          padding: 4px 10px;\n          font-size: inherit;\n          position: relative;\n          transition: color 50ms ease-in-out;\n\n          border: ${this.dashWidth}px solid;\n          border-image: ${t(this.dashWidth,this.dashLength,this.dashSpacing,this.borderRadius)};\n        }\n        \n        button::before {\n          content: "";\n          position: absolute;\n          top: 0;\n          left: 0;\n          width: 100%;\n          height: 100%;\n          border-radius: ${this.borderRadius}px;\n          background: var(--dashed-primary-light-color);\n        }\n\n        button.active {\n          color: var(--dashed-danger-color);\n        }\n\n        :host ::slotted(dashed-icon[slot="icon"]),\n        :host ::slotted(svg) {\n          stroke: currentColor;\n          padding-left: 4px;\n        }\n      </style>\n      <button type="button">\n        <slot></slot>\n        <slot name="icon"></slot>\n      </button>\n    `,this.shadowRoot.appendChild(n.content.cloneNode(!0))}_toggleTag(t){this._nativeButton.classList.toggle("active")}}customElements.define("dashed-tag",x);class f extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open",delegatesFocus:!0}),this.dashProps={dashWidth:2,dashLength:4,dashRatio:.5},this.borderRadius="12",this.dashWidth="2",this.dashLength="8",this.dashSpacing="2"}get disabled(){return this.hasAttribute("disabled")}set disabled(t){Boolean(t)?this.setAttribute("disabled",""):this.removeAttribute("disabled")}get checked(){return this.hasAttribute("checked")}set checked(t){Boolean(t)?this.setAttribute("checked",""):this.removeAttribute("checked")}get borderRadius(){return this.getAttribute("border-radius")}set borderRadius(t){this.setAttribute("border-radius",t)}get dashWidth(){return this.getAttribute("dash-width")}set dashWidth(t){this.setAttribute("dash-width",t)}get dashLength(){return this.getAttribute("dash-length")}set dashLength(t){this.setAttribute("dash-length",t)}get dashSpacing(){return this.getAttribute("dash-spacing")}set dashSpacing(t){this.setAttribute("dash-spacing",t)}connectedCallback(){this.render()}render(){const[n,s]=[6,10],i=parseFloat(this.dashWidth),a=document.createElement("template");a.innerHTML=`\n      ${e}\n      <style>\n        :host {\n          display: inline-flex;\n          align-items: center;\n          justify-content: center;\n          position: relative;\n          cursor: pointer;\n          outline: none;\n          min-width: 48px;\n        }\n\n        .toggle-container {\n          display: inline-flex;\n          position: relative;\n          width: 48px;\n          height: 24px;\n        }\n\n        label {\n          display: inline-flex;\n          align-items: center;\n          width: 100%;\n          height: 100%;\n        }\n\n        input[type="checkbox"] {\n          margin: 0;\n          width: 48px;\n          height: 24px;\n          cursor: pointer;\n          opacity: 0;\n        }\n\n        span.toggle-background {\n          box-sizing: border-box;\n          z-index: -1;\n          display: inline-block;\n          position: absolute;\n          top: ${s/2}px;\n          left: ${n/2}px;\n          width: ${48-n}px;\n          height: ${24-s}px;\n\n          border: ${this.dashWidth}px solid;\n          border-image: ${t(this.dashWidth,this.dashLength,this.dashSpacing,this.borderRadius)};\n        }\n\n        \n        span.toggle-background::before {\n          content: "";\n          position: absolute;\n          top: 0;\n          left: 0;\n          width: 100%;\n          height: 100%;\n          border-radius: ${this.borderRadius}px;\n          background: var(--dashed-primary-light-color);\n        }\n\n  \n        svg.dash .toggle-switcher {\n          fill: var(--dashed-primary-color);\n          transition: transform 100ms ease-in-out;\n          will-change: transform;\n        }\n\n        input[type="checkbox"]:checked ~ svg.dash .toggle-switcher {\n          transform: translateX(24px);\n          fill: var(--dashed-danger-color);\n        }\n      </style>\n      <div class="toggle-container">\n        <input type="checkbox" id="toggle" />\n        <span class="toggle-background"></span>\n        <svg class="dash" stroke-width="${this.dashWidth}">\n          <circle class="toggle-switcher" cx="12" cy="12" r="${(24-i)/2}" />\n        </svg>\n      </div>\n      <label for="toggle"><slot></slot></label>\n    `,this.shadowRoot.appendChild(a.content.cloneNode(!0))}}customElements.define("dashed-toggle",f);export{n as DashedButton,s as DashedCard,i as DashedCheckbox,a as DashedFab,r as DashedFooter,l as DashedHeader,c as DashedIcon,u as DashedInput,g as DashedLink,b as DashedNotification,p as DashedRadio,m as DashedSelect,v as DashedSlider,e as dashedStyles,x as DashedTag,f as DashedToggle,t as borderImage,o as menuIcon,d as closeIcon,h as githubIcon};
