const t='\n  <style title="Common styles">\n    :host{\n      --dashed-primary-color: rgba(54, 54, 231, 1);\n      --dashed-primary-light-color: rgba(54, 54, 231, 0.15);\n\n      --dashed-danger-color: rgba(250, 50, 50, 1);\n      --dashed-danger-light-color: rgba(250, 50, 50, 0.15);\n\n      --dashed-success-color: rgba(31, 141, 87, 1);\n      --dashed-success-light-color: rgba(31, 141, 87, 0.15);\n\n      --dashed-fill-color: var(--dashed-primary-light-color);\n      --dashed-outline-color: rgba(129, 129, 193);\n      z-index: 1;\n    }\n\n    :host(:focus) > * {\n      outline: 1px solid var(--dashed-outline-color);\n      outline-offset: 1px;\n    }\n\n    :host([disabled]) {\n      opacity: 0.6;\n      pointer-events: none;\n    }\n\n    svg.dash {\n      position: absolute;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      fill: none;\n      z-index: -1;\n    }\n\n    svg.dash .border {\n      stroke: var(--dashed-primary-color);\n      fill: var(--dashed-fill-color);\n    }\n\n    svg.dash .border-bottom {\n      stroke: var(--dashed-primary-color);\n    }\n\n    svg.dash .background {\n      fill: var(--dashed-fill-color);\n    }\n  </style>\n';class e extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open",delegatesFocus:!0}),this.dashProps={dashWidth:2,dashLength:4,dashRatio:.5},this.borderRadius="0",this.dashWidth="2",this.dashLength="4",this.dashSpacing="2"}get disabled(){return this.hasAttribute("disabled")}set disabled(t){Boolean(t)?this.setAttribute("disabled",""):this.removeAttribute("disabled")}get checked(){return this.hasAttribute("checked")}set checked(t){Boolean(t)?this.setAttribute("checked",""):this.removeAttribute("checked")}get borderRadius(){return this.getAttribute("border-radius")}set borderRadius(t){this.setAttribute("border-radius",t)}get dashWidth(){return this.getAttribute("dash-width")}set dashWidth(t){this.setAttribute("dash-width",t)}get dashLength(){return this.getAttribute("dash-length")}set dashLength(t){this.setAttribute("dash-length",t)}get dashSpacing(){return this.getAttribute("dash-spacing")}set dashSpacing(t){this.setAttribute("dash-spacing",t)}connectedCallback(){this.render()}render(){const e=document.createElement("template");e.innerHTML=`\n      ${t}\n      <style>\n        :host {\n          display: inline-block;\n          position: relative;\n          cursor: inherit;\n          outline: none;\n        }\n\n        .checkbox-container {\n          display: inline-block;\n          position: relative;\n          width: 24px;\n          height: 24px;\n\n          border: ${this.dashWidth}px solid;\n          border-image: ${function(t,e,n,s="0"){const[h,i,d,a]=[t,e,n,s].map(t=>parseFloat(t)),o=h+a,r=h+a;return`url("data:image/svg+xml;utf8,${`\n    <svg\n      xmlns='http://www.w3.org/2000/svg'\n      width='${d+i+2*h+2*a}'\n      height='${d+i+2*h+2*a}'\n      viewBox='0 0 ${d+i+2*h+2*a} ${d+i+2*h+2*a}'\n      stroke-width='${h}'\n      stroke='blue'>\n        <path\n          stroke-width='${h}'\n          d='M${h+a+d/2} ${h/2}h${i}m${d/2+a+h/2} ${h/2+a+d/2}v${i}m${-h/2-a-d/2} ${d/2+a+h/2}h${-i}m${-d/2-a-h/2} ${-h/2-a-d/2}v${-i}'/>\n\n        ${a>0?`<path\n              fill='none'\n              d='M${h/2} ${h+a-d/2}a${a} ${a} 0 0 1 ${h/2+a-d/2} ${-a-h/2+d/2}m${i+2*d} 0a${a} ${a} 0 0 1 ${a+h/2-d/2} ${h/2+a-d/2}m0 ${i+2*d}a${a} ${a} 0 0 1 ${-h/2-a+d/2} ${a+h/2-d/2}m${-i-2*d} 0a${a} ${a} 0 0 1 ${-a-h/2+d/2} ${-h/2-a+d/2}'/>`:""}\n    </svg>`.replace(/\n|\r|\t/gm,"")}") ${o} / ${r} round`}(this.dashWidth,this.dashLength,this.dashSpacing,this.borderRadius)};\n        }\n\n        .checkbox-container::before {\n          content: "";\n          position: absolute;\n          top: 0;\n          left: 0;\n          width: 100%;\n          height: 100%;\n          border-radius: ${this.borderRadius}px;\n          background: var(--dashed-primary-light-color);\n        }\n\n        input[type="checkbox"] {\n          margin: 0;\n          width: 100%;\n          height: 100%;\n          opacity: 0;\n        }\n\n        svg.dash .checkmark {\n          stroke: var(--dashed-danger-color);\n          stroke-width: ${1.8*parseFloat(this.dashWidth)};\n        }\n\n        input[type="checkbox"]:not(:checked) ~ svg.dash .checkmark {\n          opacity: 0;\n        }\n\n        input[type="checkbox"]:checked ~ svg.dash .checkmark {\n          opacity: 1;\n        }\n      </style>\n      <div class="checkbox-container">\n        <input type="checkbox" id="checkbox" />\n        <svg class="dash">\n          <path class="checkmark" d='M6 12l4 4l8 -8' />\n        </svg>\n      </div>\n      <label for="checkbox"><slot></slot></label>\n    `,this.shadowRoot.appendChild(e.content.cloneNode(!0))}}customElements.define("dashed-checkbox",e);export{e as DashedCheckbox};
