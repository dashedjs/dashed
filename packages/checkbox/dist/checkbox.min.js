function t(t,o,a){const{width:r,height:d,borderRadius:i}=o,c=e(o,a);!function(t,e,n,s,h){t.setAttribute("stroke-width",`${h}`),t.setAttribute("x",`${h/2}`),t.setAttribute("y",`${h/2}`),t.setAttribute("width",`${e-h}`),t.setAttribute("height",`${n-h}`),t.setAttribute("rx",`${s}`),t.setAttribute("ry",`${s}`)}(t,r,d,i,c.dashWidth);const{strokeDasharray:l,strokeDashOffset:u}=function(t,o){const{width:a,height:r,borderRadius:d}=t,{dashWidth:i,dashLength:c,dashRatio:l}=e(t,o),u=a-i-2*d,b=r-i-2*d,g=2*Math.PI*d/4,p=n(u,{dashWidth:i,dashLength:c,dashRatio:l}),k=n(b,{dashWidth:i,dashLength:c,dashRatio:l}),f=n(g,{dashWidth:i,dashLength:c,dashRatio:l}),m=s(u,p,c),y=s(b,k,c),v=s(g,f,c),x=h(p,m,v,c),w=h(f,v,y,c),$=h(k,y,v,c),A=h(f,v,m,c);return{strokeDasharray:`${x}${w}${$}${A}`.trim(),strokeDashOffset:`${-m}`,dashWidth:i}}(o,c);!function(t,e,n){t.setAttribute("stroke-dasharray",e),t.setAttribute("stroke-dashoffset",n)}(t,l,u)}function e(t,e){const{width:n,height:s}=t;let{dashWidth:h,dashLength:o,dashRatio:a}=e;if(h<0||o<0||a<0)throw new Error("dashWidth, dashLength and dashRatio must be positive numbers");const r=Math.min(n,s);return{dashWidth:h=h>r/2?r/2:h,dashLength:o=o>r?r:o,dashRatio:a=o*(1+a)>r?r-o:a}}function n(t,e){const{dashLength:n,dashRatio:s}=e;return t-s*n<=0?0:Math.floor((t-s*n)/((1+s)*n))}function s(t,e,n){return 0===e?t/2:Math.round((t-e*n)/(e+1)*Math.pow(10,3))/Math.pow(10,3)}function h(t,e,n,s){return 0===t?`0 ${e+n} `:`${s} ${e} `.repeat(t-1)+`${s} ${e+n} `}const o='\n  <style title="Common styles">\n    :host{\n      --dashed-primary-color: rgba(54, 54, 231, 1);\n      --dashed-primary-light-color: rgba(54, 54, 231, 0.15);\n\n      --dashed-danger-color: rgba(250, 50, 50, 1);\n      --dashed-danger-light-color: rgba(250, 50, 50, 0.15);\n\n      --dashed-success-color: rgba(31, 141, 87, 1);\n      --dashed-success-light-color: rgba(31, 141, 87, 0.15);\n\n      --dashed-fill-color: var(--dashed-primary-light-color);\n      --dashed-outline-color: rgba(129, 129, 193);\n      z-index: 1;\n    }\n\n    :host(:focus) svg.dash {\n      outline: 1px solid var(--dashed-outline-color);\n      outline-offset: 1px;\n    }\n\n    :host([disabled]) {\n      opacity: 0.6;\n      pointer-events: none;\n    }\n\n    svg.dash {\n      position: absolute;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      fill: none;\n      z-index: -1;\n    }\n\n    svg.dash .border {\n      stroke: var(--dashed-primary-color);\n      fill: var(--dashed-fill-color);\n    }\n\n    svg.dash .border-bottom {\n      stroke: var(--dashed-primary-color);\n    }\n\n    svg.dash .background {\n      fill: var(--dashed-fill-color);\n    }\n  </style>\n';class a extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open",delegatesFocus:!0}),this.dashProps={dashWidth:2,dashLength:4,dashRatio:.5}}get disabled(){return this.hasAttribute("disabled")}set disabled(t){Boolean(t)?this.setAttribute("disabled",""):this.removeAttribute("disabled")}get checked(){return this.hasAttribute("checked")}set checked(t){Boolean(t)?this.setAttribute("checked",""):this.removeAttribute("checked")}get dashProps(){return this._dashProps}set dashProps(t){this._dashProps=t}connectedCallback(){this.render(),this.drawDash()}render(){const t=document.createElement("template");t.innerHTML=`\n      ${o}\n      <style>\n        :host {\n          display: inline-flex;\n          align-items: center;\n          justify-content: center;\n          position: relative;\n          cursor: inherit;\n          outline: none;\n          min-width: 48px;\n        }\n\n        .checkbox-container {\n          display: inline-block;\n          position: relative;\n          width: 24px;\n          height: 24px;\n        }\n\n        input[type="checkbox"] {\n          margin: 0;\n          width: 100%;\n          height: 100%;\n          opacity: 0;\n        }\n\n        svg.dash .checkmark {\n          stroke: var(--dashed-danger-color);\n        }\n\n        input[type="checkbox"]:not(:checked) ~ svg.dash .checkmark {\n          opacity: 0;\n        }\n\n        input[type="checkbox"]:checked ~ svg.dash .checkmark {\n          opacity: 1;\n        }\n      </style>\n      <div class="checkbox-container">\n        <input type="checkbox" id="checkbox" />\n        <svg class="dash">\n          <rect class="border" />\n          <path class="checkmark" />\n        </svg>\n      </div>\n      <label for="checkbox"><slot></slot></label>\n    `,this.shadowRoot.appendChild(t.content.cloneNode(!0))}drawDash(){const e=this.shadowRoot.querySelector("svg.dash"),n=e.querySelector(".border"),[s,h]=[24,24];t(n,{width:s,height:h,borderRadius:0},this.dashProps);const o=e.querySelector(".checkmark");o.setAttribute("stroke-width",`${1.8*this.dashProps.dashWidth}`),o.setAttribute("d","M6 12l4 4l8 -8")}}customElements.define("dashed-checkbox",a);export{a as DashedCheckbox};
