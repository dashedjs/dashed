const t='\n  <style title="Common styles">\n    :host{\n      --dashed-primary-color: rgba(54, 54, 231, 1);\n      --dashed-primary-light-color: rgba(54, 54, 231, 0.15);\n\n      --dashed-danger-color: rgba(250, 50, 50, 1);\n      --dashed-danger-light-color: rgba(250, 50, 50, 0.15);\n\n      --dashed-success-color: rgba(31, 141, 87, 1);\n      --dashed-success-light-color: rgba(31, 141, 87, 0.15);\n\n      --dashed-fill-color: var(--dashed-primary-light-color);\n      --dashed-outline-color: rgba(129, 129, 193);\n      z-index: 1;\n    }\n\n    :host(:focus) > * {\n      outline: 1px solid var(--dashed-outline-color);\n      outline-offset: 1px;\n    }\n\n    :host([disabled]) {\n      opacity: 0.6;\n      pointer-events: none;\n    }\n\n    svg.dash {\n      position: absolute;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      fill: none;\n      z-index: -1;\n    }\n\n    svg.dash .border {\n      stroke: var(--dashed-primary-color);\n      fill: var(--dashed-fill-color);\n    }\n\n    svg.dash .border-bottom {\n      stroke: var(--dashed-primary-color);\n    }\n\n    svg.dash .background {\n      fill: var(--dashed-fill-color);\n    }\n  </style>\n';class n extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open",delegatesFocus:!0}),this.dashWidth="1.5",this.dashLength="8",this.dashSpacing="2"}static get properties(){return{disabled:Boolean,role:String,dashProps:Object}}get disabled(){return this.hasAttribute("disabled")}set disabled(t){Boolean(t)?this.setAttribute("disabled",""):this.removeAttribute("disabled")}get role(){return this.getAttribute("role")}set role(t){this.setAttribute("role","")}get dashWidth(){return this.getAttribute("dash-width")}set dashWidth(t){this.setAttribute("dash-width",t)}get dashLength(){return this.getAttribute("dash-length")}set dashLength(t){this.setAttribute("dash-length",t)}get dashSpacing(){return this.getAttribute("dash-spacing")}set dashSpacing(t){this.setAttribute("dash-spacing",t)}connectedCallback(){this.render()}render(){const n=document.createElement("template");n.innerHTML=`\n      ${t}\n      <style>\n        :host {\n          display: inline-block;\n          cursor: pointer;\n          outline: none;\n          position: relative;\n          font-size: 16px;\n        }\n\n        :host(:hover) {\n          color: var(--dashed-primary-color);\n          --dashed-fill-color: var(--dashed-primary-light-color);\n        }\n\n        a {\n          display: inline-block;\n          cursor: inherit;\n          text-align: center;\n          text-decoration: none;\n          color: inherit;\n          outline: none;\n          padding-bottom: 4px;\n          font-size: inherit;\n          position: relative;\n          transition: color 50ms ease-in-out;\n\n          border-bottom: ${this.dashWidth}px solid;\n          border-image: ${function(t,n,e,s="0"){const[o,r,i,a]=[t,n,e,s].map(t=>parseFloat(t)),d=o+a,h=o+a;return`url("data:image/svg+xml;utf8,${`\n    <svg\n      xmlns='http://www.w3.org/2000/svg'\n      width='${i+r+2*o+2*a}'\n      height='${i+r+2*o+2*a}'\n      viewBox='0 0 ${i+r+2*o+2*a} ${i+r+2*o+2*a}'\n      stroke-width='${o}'\n      stroke='blue'>\n        <path\n          stroke-width='${o}'\n          d='M${o+a+i/2} ${o/2}h${r}m${i/2+a+o/2} ${o/2+a+i/2}v${r}m${-o/2-a-i/2} ${i/2+a+o/2}h${-r}m${-i/2-a-o/2} ${-o/2-a-i/2}v${-r}'/>\n\n        ${a>0?`<path\n              fill='none'\n              d='M${o/2} ${o+a-i/2}a${a} ${a} 0 0 1 ${o/2+a-i/2} ${-a-o/2+i/2}m${r+2*i} 0a${a} ${a} 0 0 1 ${a+o/2-i/2} ${o/2+a-i/2}m0 ${r+2*i}a${a} ${a} 0 0 1 ${-o/2-a+i/2} ${a+o/2-i/2}m${-r-2*i} 0a${a} ${a} 0 0 1 ${-a-o/2+i/2} ${-o/2-a+i/2}'/>`:""}\n    </svg>`.replace(/\n|\r|\t/gm,"")}") ${d} / ${h} round`}(this.dashWidth,this.dashLength,this.dashSpacing)};\n        }\n      </style>\n      <a href="#">\n        <slot></slot>\n      </a>\n    `,this.shadowRoot.appendChild(n.content.cloneNode(!0))}}customElements.define("dashed-link",n);export{n as DashedLink};
