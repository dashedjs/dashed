function t(t,i,d){const{width:a,height:h,borderRadius:r}=i,l=n(i,d);!function(t,n,e,s,o){t.setAttribute("stroke-width",`${o}`),t.setAttribute("x",`${o/2}`),t.setAttribute("y",`${o/2}`),t.setAttribute("width",`${n-o}`),t.setAttribute("height",`${e-o}`),t.setAttribute("rx",`${s}`),t.setAttribute("ry",`${s}`)}(t,a,h,r,l.dashWidth);const{strokeDasharray:c,strokeDashOffset:u}=function(t,i){const{width:d,height:a,borderRadius:h}=t,{dashWidth:r,dashLength:l,dashRatio:c}=n(t,i),u=d-r-2*h,g=a-r-2*h,b=2*Math.PI*h/4,p=e(u,{dashWidth:r,dashLength:l,dashRatio:c}),f=e(g,{dashWidth:r,dashLength:l,dashRatio:c}),m=e(b,{dashWidth:r,dashLength:l,dashRatio:c}),v=s(u,p,l),y=s(g,f,l),w=s(b,m,l),$=o(p,v,w,l),x=o(m,w,y,l),R=o(f,y,w,l),k=o(m,w,v,l);return{strokeDasharray:`${$}${x}${R}${k}`.trim(),strokeDashOffset:`${-v}`,dashWidth:r}}(i,l);!function(t,n,e){t.setAttribute("stroke-dasharray",n),t.setAttribute("stroke-dashoffset",e)}(t,c,u)}function n(t,n){const{width:e,height:s}=t;let{dashWidth:o,dashLength:i,dashRatio:d}=n;if(o<0||i<0||d<0)throw new Error("dashWidth, dashLength and dashRatio must be positive numbers");const a=Math.min(e,s);return{dashWidth:o=o>a/2?a/2:o,dashLength:i=i>a?a:i,dashRatio:d=i*(1+d)>a?a-i:d}}function e(t,n){const{dashLength:e,dashRatio:s}=n;return t-s*e<=0?0:Math.floor((t-s*e)/((1+s)*e))}function s(t,n,e){return 0===n?t/2:Math.round((t-n*e)/(n+1)*Math.pow(10,3))/Math.pow(10,3)}function o(t,n,e,s){return 0===t?`0 ${n+e} `:`${s} ${n} `.repeat(t-1)+`${s} ${n+e} `}const i='\n  <style title="Common styles">\n    :host{\n      --dashed-primary-color: rgba(54, 54, 231, 1);\n      --dashed-primary-light-color: rgba(54, 54, 231, 0.15);\n\n      --dashed-danger-color: rgba(250, 50, 50, 1);\n      --dashed-danger-light-color: rgba(250, 50, 50, 0.15);\n\n      --dashed-success-color: rgba(31, 141, 87, 1);\n      --dashed-success-light-color: rgba(31, 141, 87, 0.15);\n\n      --dashed-fill-color: var(--dashed-primary-light-color);\n      --dashed-outline-color: rgba(129, 129, 193);\n      z-index: 1;\n    }\n\n    :host(:focus) svg.dash {\n      outline: 1px solid var(--dashed-outline-color);\n      outline-offset: 1px;\n    }\n\n    :host([disabled]) {\n      opacity: 0.6;\n      pointer-events: none;\n    }\n\n    svg.dash {\n      position: absolute;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      fill: none;\n      z-index: -1;\n    }\n\n    svg.dash .border {\n      stroke: var(--dashed-primary-color);\n      fill: var(--dashed-fill-color);\n    }\n\n    svg.dash .border-bottom {\n      stroke: var(--dashed-primary-color);\n    }\n\n    svg.dash .background {\n      fill: var(--dashed-fill-color);\n    }\n  </style>\n';class d extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open",delegatesFocus:!0}),this.dashProps={dashWidth:1,dashLength:6,dashRatio:.15}}get disabled(){return this.hasAttribute("disabled")}set disabled(t){Boolean(t)?this.setAttribute("disabled",""):this.removeAttribute("disabled")}get dashProps(){return this._dashProps}set dashProps(t){this._dashProps=t}connectedCallback(){this.render(),this.drawDash()}render(){const t=document.createElement("template");t.innerHTML=`\n      ${i}\n      <style>\n        :host {\n          --dashed-input-dimension: 24px;\n\n          display: inline-flex;\n          align-items: center;\n          justify-content: center;\n          position: relative;\n          cursor: inherit;\n          outline: none;\n          min-width: 96px;\n          min-height: 24px;\n        }\n\n        .input-container {\n          display: inline-block;\n          position: relative;\n          outline: none;\n          /* width: 100%; */\n          /* height: 100%; */\n        }\n\n        input {\n          margin: 5px;\n          padding: 5px;\n          box-sizing: border-box;\n          border: none;\n          outline: none;\n          /* max-width: 100%; */\n          height: 100%;\n          background: var(--dashed-fill-color);\n        }\n      </style>\n      <label for="input"><slot></slot></label>\n      <div class="input-container">\n        <input id="input" />\n        <svg class="dash">\n          <rect class="border" />\n        </svg>\n      </div>\n    `,this.shadowRoot.appendChild(t.content.cloneNode(!0))}drawDash(){const n=this.shadowRoot.querySelector("svg.dash").querySelector(".border"),{width:e,height:s}=this.shadowRoot.querySelector(".input-container").getBoundingClientRect();t(n,{width:e,height:s,borderRadius:5},this.dashProps)}}customElements.define("dashed-input",d);export{d as DashedInput};
