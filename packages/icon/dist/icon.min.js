class t extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open",delegatesFocus:!0}),this._firstRender=!0}get name(){return this.getAttribute("name")}set name(t){this.setAttribute("name",t)}get src(){return this.getAttribute("src")}set src(t){this.setAttribute("src",t)}get size(){return this.getAttribute("size")}set size(t){this.setAttribute("size",t)}get ariaLabel(){return this.hasAttribute("aria-label")}set ariaLabel(t){this.setAttribute("aria-label",t)}get ariaLabelledBy(){return this.hasAttribute("aria-labelledby")}set ariaLabelledBy(t){this.setAttribute("aria-labelledby",t)}get dashProps(){return this._dashProps}set dashProps(t){this._dashProps=t}connectedCallback(){this.render();const t=new MutationObserver(t=>{"childList"===t[0].type&&this.dispatchEvent(new CustomEvent("iconloaded"))});try{t.observe(this.shadowRoot,{childList:!0})}catch(e){t.observe(this,{childList:!0})}this._firstRender=!1}static get observedAttributes(){return["name","src","size"]}attributeChangedCallback(t,e,s){this._firstRender||this.drawDash()}async render(){const t=await this.fetchIcon(),e=document.createElement("template");e.innerHTML=`\n      <style>\n        :host {\n          display: inline-flex;\n          align-items: center;\n          justify-content: center;\n          cursor: pointer;\n          outline: none;\n          width: 24px;\n          height: 24px;\n        }\n\n        :host-context(dashed-button),\n        :host-context(dashed-button) svg {\n          width: 16px;\n          height: 16px;\n        }\n\n        :host-context(dashed-tag),\n        :host-context(dashed-tag) svg {\n          width: 12px;\n          height: 12px;\n        }\n\n        :host-context(dashed-fab),\n        :host-context(dashed-fab) svg {\n          width: 18px;\n          height: 18px;\n        }\n        \n        span {\n          display: inline-flex;\n          align-items: center;\n          justify-content: center;\n          width: 100%;\n          height: 100%;\n        }\n      </style>\n      <span>${t}</span>\n    `,this.shadowRoot.appendChild(e.content.cloneNode(!0))}fetchIcon(){const t=this.name?`/node_modules/@dashedjs/dashed-icons/${this.name}.svg`:this.src;return fetch(t).then(e=>{if(200!==e.status)throw new Error(`Error code ${e.status}, failed to load icon: ${t}`);return e.text()})}}customElements.define("dashed-icon",t);export{t as DashedIcon};
