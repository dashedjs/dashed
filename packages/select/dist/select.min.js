function t(t,n,s){const{width:o,height:a}=n,r=e(n,s);!function(t,e,n,s){t.setAttribute("x1","0"),t.setAttribute("y1",`${n-s/2}`),t.setAttribute("x2",`${e}`),t.setAttribute("y2",`${n-s/2}`),t.setAttribute("stroke-width",`${s}`)}(t,o,a,r.dashWidth);const{strokeDasharray:i,strokeDashOffset:d}=function(t,n){const{width:s}=t,{dashWidth:o,dashLength:a,dashRatio:r}=e(t,n),i=1+Math.floor((s-a)/((1+r)*a)),d=Math.round((s-i*a)/(i-1)*Math.pow(10,3))/Math.pow(10,3);return{strokeDasharray:`${a} ${d}`,strokeDashOffset:"0",dashWidth:o}}(n,r);!function(t,e,n){t.setAttribute("stroke-dasharray",e),t.setAttribute("stroke-dashoffset",n)}(t,i,d)}function e(t,e){const{width:n}=t;let{dashWidth:s,dashLength:o,dashRatio:a}=e;if(s<0||o<0||a<0)throw new Error("dashWidth, dashLength and dashRatio must be positive numbers");return{dashWidth:s=s>n/2?n/2:s,dashLength:o=o>n?n:o,dashRatio:a=o*(1+a)>n?n-o:a}}const n='\n  <style title="Common styles">\n    :host{\n      --dashed-primary-color: rgba(54, 54, 231, 1);\n      --dashed-primary-light-color: rgba(54, 54, 231, 0.15);\n\n      --dashed-danger-color: rgba(250, 50, 50, 1);\n      --dashed-danger-light-color: rgba(250, 50, 50, 0.15);\n\n      --dashed-success-color: rgba(31, 141, 87, 1);\n      --dashed-success-light-color: rgba(31, 141, 87, 0.15);\n\n      --dashed-fill-color: var(--dashed-primary-light-color);\n      --dashed-outline-color: rgba(129, 129, 193);\n      z-index: 1;\n    }\n\n    :host(:focus) svg.dash {\n      outline: 1px solid var(--dashed-outline-color);\n      outline-offset: 1px;\n    }\n\n    :host([disabled]) {\n      opacity: 0.6;\n      pointer-events: none;\n    }\n\n    svg.dash {\n      position: absolute;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      fill: none;\n      z-index: -1;\n    }\n\n    svg.dash .border {\n      stroke: var(--dashed-primary-color);\n      fill: var(--dashed-fill-color);\n    }\n\n    svg.dash .border-bottom {\n      stroke: var(--dashed-primary-color);\n    }\n\n    svg.dash .background {\n      fill: var(--dashed-fill-color);\n    }\n  </style>\n';class s extends HTMLElement{static get properties(){return{disabled:Boolean,value:String,dashProps:Object}}constructor(){super(),this.attachShadow({mode:"open",delegatesFocus:!0}),this.dashProps={dashWidth:2,dashLength:10,dashRatio:.3}}get disabled(){return this.hasAttribute("disabled")}set disabled(t){Boolean(t)?this.setAttribute("disabled",""):this.removeAttribute("disabled")}get value(){return this.getAttribute("value")}set value(t){this.setAttribute("value",t)}get dashProps(){return this._dashProps}set dashProps(t){this._dashProps=t}connectedCallback(){this.render(),this.drawDash()}render(){const t=document.createElement("template");t.innerHTML=`\n      ${n}\n      <style>\n        :host {\n          --dashed-select-min-width: 96px;\n          --dashed-select-min-height: 24px;\n\n          display: inline-flex;\n          align-items: center;\n          justify-content: center;\n          position: relative;\n          cursor: inherit;\n          outline: none;\n          min-width: var(--dashed-select-min-width);\n          min-height: var(--dashed-select-min-height);\n        }\n\n        .select-container {\n          display: inline-block;\n          position: relative;\n          width: 100%;\n          height: 100%;\n        }\n\n        select {\n          border: none;\n          outline: none;\n          padding-right: 12px;\n          margin-bottom: 4px;\n          background: transparent;\n          cursor: pointer;\n          width: 100%;\n          height: 100%;\n          appearance: none;\n          -webkit-appearance: none;\n          -moz-appearance: none;\n        }\n  \n        svg.dash .caret {\n          stroke: var(--dashed-primary-color);\n        }\n      </style>\n      <label for="select"><slot></slot></label>\n      <div class="select-container">\n        <select id="select">\n          <option value="1">Option 1</option>\n          <option value="3">Option 3</option>\n          <option value="2">Option 2</option>\n        </select>\n        <svg class="dash">\n          <rect class="background" />\n          <path class="caret" />\n          <line class="border-bottom" />\n        </svg>\n      </div>\n    `,this.shadowRoot.appendChild(t.content.cloneNode(!0))}drawDash(){const e=this.shadowRoot.querySelector("svg.dash"),n=e.querySelector(".border-bottom"),{width:s,height:o}=this.shadowRoot.querySelector(".select-container").getBoundingClientRect();t(n,{width:s,height:o},this.dashProps);const a=e.querySelector(".caret");a.setAttribute("stroke-width",`${1.8*this.dashProps.dashWidth}`),a.setAttribute("d",`M${s-12} 8l4 4l4 -4`);const r=e.querySelector(".background");r.setAttribute("width",`${s}`),r.setAttribute("height",`${o-this.dashProps.dashWidth/2}`)}}customElements.define("dashed-select",s);export{s as DashedSelect};
