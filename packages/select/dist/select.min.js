const n='\n  <style title="Common styles">\n    :host{\n      --dashed-primary-color: rgba(54, 54, 231, 1);\n      --dashed-primary-light-color: rgba(54, 54, 231, 0.15);\n\n      --dashed-danger-color: rgba(250, 50, 50, 1);\n      --dashed-danger-light-color: rgba(250, 50, 50, 0.15);\n\n      --dashed-success-color: rgba(31, 141, 87, 1);\n      --dashed-success-light-color: rgba(31, 141, 87, 0.15);\n\n      --dashed-fill-color: var(--dashed-primary-light-color);\n      --dashed-outline-color: rgba(129, 129, 193);\n      z-index: 1;\n    }\n\n    :host(:focus) > * {\n      outline: 1px solid var(--dashed-outline-color);\n      outline-offset: 1px;\n    }\n\n    :host([disabled]) {\n      opacity: 0.6;\n      pointer-events: none;\n    }\n\n    svg.dash {\n      position: absolute;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      fill: none;\n      z-index: -1;\n    }\n\n    svg.dash .border {\n      stroke: var(--dashed-primary-color);\n      fill: var(--dashed-fill-color);\n    }\n\n    svg.dash .border-bottom {\n      stroke: var(--dashed-primary-color);\n    }\n\n    svg.dash .background {\n      fill: var(--dashed-fill-color);\n    }\n  </style>\n';class t extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open",delegatesFocus:!0}),this.dashWidth="2",this.dashLength="10",this.dashSpacing="3.33"}get disabled(){return this.hasAttribute("disabled")}set disabled(n){Boolean(n)?this.setAttribute("disabled",""):this.removeAttribute("disabled")}get value(){return this.getAttribute("value")}set value(n){this.setAttribute("value",n)}get dashWidth(){return this.getAttribute("dash-width")}set dashWidth(n){this.setAttribute("dash-width",n)}get dashLength(){return this.getAttribute("dash-length")}set dashLength(n){this.setAttribute("dash-length",n)}get dashSpacing(){return this.getAttribute("dash-spacing")}set dashSpacing(n){this.setAttribute("dash-spacing",n)}connectedCallback(){this.render()}render(){const t=document.createElement("template");t.innerHTML=`\n      ${n}\n      <style>\n        :host {\n          display: inline-block;\n          position: relative;\n          cursor: inherit;\n          outline: none;\n        }\n\n        .select-container {\n          min-width: 96px;\n          min-height: 24px;\n          display: inline-block;\n          position: relative;\n\n          border-bottom: ${this.dashWidth}px solid;\n          border-image: ${function(n,t,e,s="0"){const[a,o,i,r]=[n,t,e,s].map(n=>parseFloat(n)),d=a+r,h=a+r;return`url("data:image/svg+xml;utf8,${`\n    <svg\n      xmlns='http://www.w3.org/2000/svg'\n      width='${i+o+2*a+2*r}'\n      height='${i+o+2*a+2*r}'\n      viewBox='0 0 ${i+o+2*a+2*r} ${i+o+2*a+2*r}'\n      stroke-width='${a}'\n      stroke='blue'>\n        <path\n          stroke-width='${a}'\n          d='M${a+r+i/2} ${a/2}h${o}m${i/2+r+a/2} ${a/2+r+i/2}v${o}m${-a/2-r-i/2} ${i/2+r+a/2}h${-o}m${-i/2-r-a/2} ${-a/2-r-i/2}v${-o}'/>\n\n        ${r>0?`<path\n              fill='none'\n              d='M${a/2} ${a+r-i/2}a${r} ${r} 0 0 1 ${a/2+r-i/2} ${-r-a/2+i/2}m${o+2*i} 0a${r} ${r} 0 0 1 ${r+a/2-i/2} ${a/2+r-i/2}m0 ${o+2*i}a${r} ${r} 0 0 1 ${-a/2-r+i/2} ${r+a/2-i/2}m${-o-2*i} 0a${r} ${r} 0 0 1 ${-r-a/2+i/2} ${-a/2-r+i/2}'/>`:""}\n    </svg>`.replace(/\n|\r|\t/gm,"")}") ${d} / ${h} round`}(this.dashWidth,this.dashLength,this.dashSpacing)};\n        }\n\n        .select-container::before {\n          content: "";\n          z-index: -1;\n          position: absolute;\n          top: 0;\n          left: 0;\n          width: 100%;\n          height: 100%;\n          background: var(--dashed-primary-light-color);\n        }\n\n        select {\n          border: none;\n          outline: none;\n          padding-right: 12px;\n          margin-bottom: 4px;\n          background: transparent;\n          cursor: pointer;\n          width: 100%;\n          height: 100%;\n          appearance: none;\n          -webkit-appearance: none;\n          -moz-appearance: none;\n        }\n  \n        svg.dash .caret {\n          stroke: var(--dashed-primary-color);\n          stroke-width: ${parseFloat(this.dashWidth)};\n        }\n      </style>\n      <label for="select"><slot></slot></label>\n      <div class="select-container">\n        <select id="select">\n          <option value="1">Option 1</option>\n          <option value="3">Option 3</option>\n          <option value="2">Option 2</option>\n        </select>\n        <svg class="dash">\n          <path class="caret" d="M0 8l4 4l4 -4" transform="translate(84, 0)" />\n        </svg>\n      </div>\n    `,this.shadowRoot.appendChild(t.content.cloneNode(!0))}}customElements.define("dashed-select",t);export{t as DashedSelect};
