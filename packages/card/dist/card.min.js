const n='\n  <style title="Common styles">\n    :host{\n      --dashed-primary-color: rgba(54, 54, 231, 1);\n      --dashed-primary-light-color: rgba(54, 54, 231, 0.15);\n\n      --dashed-danger-color: rgba(250, 50, 50, 1);\n      --dashed-danger-light-color: rgba(250, 50, 50, 0.15);\n\n      --dashed-success-color: rgba(31, 141, 87, 1);\n      --dashed-success-light-color: rgba(31, 141, 87, 0.15);\n\n      --dashed-fill-color: var(--dashed-primary-light-color);\n      --dashed-outline-color: rgba(129, 129, 193);\n      z-index: 1;\n    }\n\n    :host(:focus) > * {\n      outline: 1px solid var(--dashed-outline-color);\n      outline-offset: 1px;\n    }\n\n    :host([disabled]) {\n      opacity: 0.6;\n      pointer-events: none;\n    }\n\n    svg.dash {\n      position: absolute;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      fill: none;\n      z-index: -1;\n    }\n\n    svg.dash .border {\n      stroke: var(--dashed-primary-color);\n      fill: var(--dashed-fill-color);\n    }\n\n    svg.dash .border-bottom {\n      stroke: var(--dashed-primary-color);\n    }\n\n    svg.dash .background {\n      fill: var(--dashed-fill-color);\n    }\n  </style>\n';class t extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open",delegatesFocus:!0}),this.borderRadius="16",this.dashWidth="2",this.dashLength="20",this.dashSpacing="2"}get borderRadius(){return this.getAttribute("border-radius")}set borderRadius(n){this.setAttribute("border-radius",n)}get dashWidth(){return this.getAttribute("dash-width")}set dashWidth(n){this.setAttribute("dash-width",n)}get dashLength(){return this.getAttribute("dash-length")}set dashLength(n){this.setAttribute("dash-length",n)}get dashSpacing(){return this.getAttribute("dash-spacing")}set dashSpacing(n){this.setAttribute("dash-spacing",n)}connectedCallback(){this.render()}render(){const t=document.createElement("template");t.innerHTML=`\n      ${n}\n      <style>\n        :host {\n          display: inline-block;\n          position: relative;\n          cursor: inherit;\n          outline: none;\n        }\n\n        .card {\n          display: inline-block;\n          position: relative;\n          min-width: 256px;\n          padding: 10px;\n\n          border: ${this.dashWidth}px solid;\n          border-image: ${function(n,t,e,s="0"){const[d,r,a,o]=[n,t,e,s].map(n=>parseFloat(n)),i=d+o,h=d+o;return`url("data:image/svg+xml;utf8,${`\n    <svg\n      xmlns='http://www.w3.org/2000/svg'\n      width='${a+r+2*d+2*o}'\n      height='${a+r+2*d+2*o}'\n      viewBox='0 0 ${a+r+2*d+2*o} ${a+r+2*d+2*o}'\n      stroke-width='${d}'\n      stroke='blue'>\n        <path\n          stroke-width='${d}'\n          d='M${d+o+a/2} ${d/2}h${r}m${a/2+o+d/2} ${d/2+o+a/2}v${r}m${-d/2-o-a/2} ${a/2+o+d/2}h${-r}m${-a/2-o-d/2} ${-d/2-o-a/2}v${-r}'/>\n\n        ${o>0?`<path\n              fill='none'\n              d='M${d/2} ${d+o-a/2}a${o} ${o} 0 0 1 ${d/2+o-a/2} ${-o-d/2+a/2}m${r+2*a} 0a${o} ${o} 0 0 1 ${o+d/2-a/2} ${d/2+o-a/2}m0 ${r+2*a}a${o} ${o} 0 0 1 ${-d/2-o+a/2} ${o+d/2-a/2}m${-r-2*a} 0a${o} ${o} 0 0 1 ${-o-d/2+a/2} ${-d/2-o+a/2}'/>`:""}\n    </svg>`.replace(/\n|\r|\t/gm,"")}") ${i} / ${h} round`}(this.dashWidth,this.dashLength,this.dashSpacing,this.borderRadius)};\n        }\n\n        .card::before {\n          z-index: -1;\n          content: "";\n          position: absolute;\n          top: 0;\n          left: 0;\n          width: 100%;\n          height: 100%;\n          border-radius: ${this.borderRadius}px;\n          background: var(--dashed-primary-light-color);\n        }\n\n        .card__title {\n        }\n\n        .card__content {\n        }\n\n        .card__footer {\n          display: flex;\n          justify-content: flex-end;\n        }\n\n        .card__footer__button {\n          display: inline-block;\n          cursor: pointer;\n        }\n      </style>\n      <div class="card">\n        <h4 class="card__title">Card title</h3>\n        <h5 class="card__subtitle">Card subtitle</h5>\n        <div class="card__content">\n          This is the card content. This is a text divlacehoder.\n          <p>It can grow at will</p>\n        </div>\n        <div class="card__footer">\n          <small>Here the card footer</small>\n          <button class="card__footer__button">button1</button>\n          <button class="card__footer__button">button2</button>\n        </div>\n      </div>\n    `,this.shadowRoot.appendChild(t.content.cloneNode(!0))}}customElements.define("dashed-card",t);export{t as DashedCard};
