function t(t,a,o){const{width:r,height:i,borderRadius:h}=a,l=n(a,o);!function(t,n,e,s,d){t.setAttribute("stroke-width",`${d}`),t.setAttribute("x",`${d/2}`),t.setAttribute("y",`${d/2}`),t.setAttribute("width",`${n-d}`),t.setAttribute("height",`${e-d}`),t.setAttribute("rx",`${s}`),t.setAttribute("ry",`${s}`)}(t,r,i,h,l.dashWidth);const{strokeDasharray:c,strokeDashOffset:u}=function(t,a){const{width:o,height:r,borderRadius:i}=t,{dashWidth:h,dashLength:l,dashRatio:c}=n(t,a),u=o-h-2*i,b=r-h-2*i,g=2*Math.PI*i/4,f=e(u,{dashWidth:h,dashLength:l,dashRatio:c}),p=e(b,{dashWidth:h,dashLength:l,dashRatio:c}),w=e(g,{dashWidth:h,dashLength:l,dashRatio:c}),v=s(u,f,l),m=s(b,p,l),_=s(g,w,l),y=d(f,v,_,l),x=d(w,_,m,l),$=d(p,m,_,l),R=d(w,_,v,l);return{strokeDasharray:`${y}${x}${$}${R}`.trim(),strokeDashOffset:`${-v}`,dashWidth:h}}(a,l);!function(t,n,e){t.setAttribute("stroke-dasharray",n),t.setAttribute("stroke-dashoffset",e)}(t,c,u)}function n(t,n){const{width:e,height:s}=t;let{dashWidth:d,dashLength:a,dashRatio:o}=n;if(d<0||a<0||o<0)throw new Error("dashWidth, dashLength and dashRatio must be positive numbers");const r=Math.min(e,s);return{dashWidth:d=d>r/2?r/2:d,dashLength:a=a>r?r:a,dashRatio:o=a*(1+o)>r?r-a:o}}function e(t,n){const{dashLength:e,dashRatio:s}=n;return t-s*e<=0?0:Math.floor((t-s*e)/((1+s)*e))}function s(t,n,e){return 0===n?t/2:Math.round((t-n*e)/(n+1)*Math.pow(10,3))/Math.pow(10,3)}function d(t,n,e,s){return 0===t?`0 ${n+e} `:`${s} ${n} `.repeat(t-1)+`${s} ${n+e} `}const a='\n  <style title="Common styles">\n    :host{\n      --dashed-primary-color: rgba(54, 54, 231, 1);\n      --dashed-primary-light-color: rgba(54, 54, 231, 0.15);\n\n      --dashed-danger-color: rgba(250, 50, 50, 1);\n      --dashed-danger-light-color: rgba(250, 50, 50, 0.15);\n\n      --dashed-success-color: rgba(31, 141, 87, 1);\n      --dashed-success-light-color: rgba(31, 141, 87, 0.15);\n\n      --dashed-fill-color: var(--dashed-primary-light-color);\n      --dashed-outline-color: rgba(129, 129, 193);\n      z-index: 1;\n    }\n\n    :host(:focus) svg.dash {\n      outline: 1px solid var(--dashed-outline-color);\n      outline-offset: 1px;\n    }\n\n    :host([disabled]) {\n      opacity: 0.6;\n      pointer-events: none;\n    }\n\n    svg.dash {\n      position: absolute;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      fill: none;\n      z-index: -1;\n    }\n\n    svg.dash .border {\n      stroke: var(--dashed-primary-color);\n      fill: var(--dashed-fill-color);\n    }\n\n    svg.dash .border-bottom {\n      stroke: var(--dashed-primary-color);\n    }\n\n    svg.dash .background {\n      fill: var(--dashed-fill-color);\n    }\n  </style>\n';class o extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open",delegatesFocus:!0}),this.dashProps={dashWidth:2,dashLength:20,dashRatio:.1}}get dashProps(){return this._dashProps}set dashProps(t){this._dashProps=t}connectedCallback(){this.render(),this.drawDash(),window.addEventListener("resize",this.drawDash.bind(this))}disconnectedCallback(){window.removeEventListener("resize",this.drawDash.bind(this))}render(){const t=document.createElement("template");t.innerHTML=`\n      ${a}\n      <style>\n        :host {\n          --dashed-card-min-width: 256px;\n          --dashed-card-max-width: 512px;\n\n          display: inline-flex;\n          align-items: center;\n          justify-content: center;\n          position: relative;\n          cursor: inherit;\n          outline: none;\n          min-width: var(--dashed-card-min-width);\n          max-width: var(--dashed-card-max-width);\n        }\n\n        .card {\n          display: inline-block;\n          position: relative;\n          width: 100%;\n          height: 100%;\n          padding: 10px;\n        }\n\n        .card__title {\n        }\n\n        .card__content {\n        }\n\n        .card__footer {\n          display: flex;\n          justify-content: flex-end;\n        }\n\n        .card__footer__button {\n          display: inline-block;\n          cursor: pointer;\n        }\n      </style>\n      <div class="card">\n        <h4 class="card__title">Card title</h3>\n        <h5 class="card__subtitle">Card subtitle</h5>\n        <div class="card__content">\n          This is the card content. This is a text divlacehoder.\n          <p>It can grow at will</p>\n        </div>\n        <div class="card__footer">\n          <small>Here the card footer</small>\n          <button class="card__footer__button">button1</button>\n          <button class="card__footer__button">button2</button>\n        </div>\n        <svg class="dash" filter="url(#shadow2)">\n          <rect class="border" />\n          <filter id="shadow2">\n            <feDropShadow dx="0" dy="2" stdDeviation="2" flood-opacity="0.3" />\n          </filter>\n        </svg>\n      </div>\n    `,this.shadowRoot.appendChild(t.content.cloneNode(!0))}drawDash(){const n=this.shadowRoot.querySelector("svg.dash").querySelector(".border"),{width:e,height:s}=this.getBoundingClientRect();t(n,{width:e,height:s,borderRadius:16},this.dashProps)}}customElements.define("dashed-card",o);export{o as DashedCard};
