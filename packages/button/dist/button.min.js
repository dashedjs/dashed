function t(t,d,i){const{width:r,height:a,borderRadius:h}=d,l=e(d,i);!function(t,e,n,s,o){t.setAttribute("stroke-width",`${o}`),t.setAttribute("x",`${o/2}`),t.setAttribute("y",`${o/2}`),t.setAttribute("width",`${e-o}`),t.setAttribute("height",`${n-o}`),t.setAttribute("rx",`${s}`),t.setAttribute("ry",`${s}`)}(t,r,a,h,l.dashWidth);const{strokeDasharray:c,strokeDashOffset:u}=function(t,d){const{width:i,height:r,borderRadius:a}=t,{dashWidth:h,dashLength:l,dashRatio:c}=e(t,d),u=i-h-2*a,b=r-h-2*a,g=2*Math.PI*a/4,p=n(u,{dashWidth:h,dashLength:l,dashRatio:c}),m=n(b,{dashWidth:h,dashLength:l,dashRatio:c}),w=n(g,{dashWidth:h,dashLength:l,dashRatio:c}),f=s(u,p,l),y=s(b,m,l),v=s(g,w,l),k=o(p,f,v,l),$=o(w,v,y,l),S=o(m,y,v,l),R=o(w,v,f,l);return{strokeDasharray:`${k}${$}${S}${R}`.trim(),strokeDashOffset:`${-f}`,dashWidth:h}}(d,l);!function(t,e,n){t.setAttribute("stroke-dasharray",e),t.setAttribute("stroke-dashoffset",n)}(t,c,u)}function e(t,e){const{width:n,height:s}=t;let{dashWidth:o,dashLength:d,dashRatio:i}=e;if(o<0||d<0||i<0)throw new Error("dashWidth, dashLength and dashRatio must be positive numbers");const r=Math.min(n,s);return{dashWidth:o=o>r/2?r/2:o,dashLength:d=d>r?r:d,dashRatio:i=d*(1+i)>r?r-d:i}}function n(t,e){const{dashLength:n,dashRatio:s}=e;return t-s*n<=0?0:Math.floor((t-s*n)/((1+s)*n))}function s(t,e,n){return 0===e?t/2:Math.round((t-e*n)/(e+1)*Math.pow(10,3))/Math.pow(10,3)}function o(t,e,n,s){return 0===t?`0 ${e+n} `:`${s} ${e} `.repeat(t-1)+`${s} ${e+n} `}String(Math.random()).slice(2),(()=>{const t=document.createElement("div");t.setAttribute("style","{{bad value}}"),t.getAttribute("style")})(),NodeFilter.SHOW_ELEMENT,NodeFilter.SHOW_COMMENT,NodeFilter.SHOW_TEXT,void 0!==window.customElements&&window.customElements.polyfillWrapFlushCallback;void 0===window.ShadyCSS||void 0===window.ShadyCSS.prepareTemplateDom&&console.warn("Incompatible ShadyCSS version detected.Please update to at least @webcomponents/webcomponentsjs@2.0.2 and@webcomponents/shadycss@1.3.1.");new Promise(t=>t(!0));const d='\n  <style title="Common styles">\n    :host{\n      --dashed-primary-color: rgba(54, 54, 231, 1);\n      --dashed-primary-light-color: rgba(54, 54, 231, 0.15);\n\n      --dashed-danger-color: rgba(250, 50, 50, 1);\n      --dashed-danger-light-color: rgba(250, 50, 50, 0.15);\n\n      --dashed-success-color: rgba(31, 141, 87, 1);\n      --dashed-success-light-color: rgba(31, 141, 87, 0.15);\n\n      --dashed-fill-color: var(--dashed-primary-light-color);\n      --dashed-outline-color: rgba(129, 129, 193);\n      z-index: 1;\n    }\n\n    :host(:focus) svg.dash {\n      outline: 1px solid var(--dashed-outline-color);\n      outline-offset: 1px;\n    }\n\n    :host([disabled]) {\n      opacity: 0.6;\n      pointer-events: none;\n    }\n\n    svg.dash {\n      position: absolute;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      fill: none;\n      z-index: -1;\n    }\n\n    svg.dash .border {\n      stroke: var(--dashed-primary-color);\n      fill: var(--dashed-fill-color);\n    }\n\n    svg.dash .border-bottom {\n      stroke: var(--dashed-primary-color);\n    }\n\n    svg.dash .background {\n      fill: var(--dashed-fill-color);\n    }\n  </style>\n';class i extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open",delegatesFocus:!0}),this.disabled=!1,this.rounded=!1,this.dashProps={dashWidth:2,dashLength:8,dashRatio:.3}}get disabled(){return this.hasAttribute("disabled")}set disabled(t){Boolean(t)?this.setAttribute("disabled",""):this.removeAttribute("disabled")}get rounded(){return this._rounded}set rounded(t){this._rounded=Boolean(t)}get dashProps(){return this._dashProps}set dashProps(t){this._dashProps=t}connectedCallback(){this.render(),this.checkIcon()}checkIcon(){this._icon=this.shadowRoot.querySelector('slot[name="icon"]').assignedNodes()[0],this._icon&&"DashedIcon"===this._icon.constructor.name?this._icon.addEventListener("iconloaded",this.drawDash.bind(this)):this.drawDash()}disconnectedCallback(){this._icon&&this._icon.removeEventListener("iconloaded",this.drawDash.bind(this))}render(){const t=document.createElement("template");t.innerHTML=`\n      ${d}\n      <style>\n        :host {\n          display: inline-block;\n          cursor: pointer;\n          outline: none;\n          position: relative;\n        }\n\n        :host(:hover) {\n          color: var(--dashed-primary-color);\n          --dashed-fill-color: var(--dashed-primary-light-color);\n        }\n\n        button {\n          min-width: 48px;\n          min-height: 32px;\n          display: inline-flex;\n          align-items: center;\n          justify-content: center;\n          background: none;\n          cursor: inherit;\n          color: inherit;\n          border: none;\n          outline: none;\n          padding: 4px 12px;\n          font-size: 14px;\n          position: relative;\n          transition: color 50ms ease-in-out;\n        }\n\n        :host ::slotted([slot="icon"]) {\n          stroke: currentColor;\n          padding-right: 4px;\n        }\n      </style>\n      <button type="button">\n        <slot name="icon"></slot>\n        <slot></slot>\n        <svg class="dash">\n          <rect class="border" />\n        </svg>\n      </button>\n    `,this.shadowRoot.appendChild(t.content.cloneNode(!0))}drawDash(){const e=this.shadowRoot.querySelector("svg.dash").querySelector(".border"),{width:n,height:s}=this.getBoundingClientRect();t(e,{width:n,height:s,borderRadius:this.rounded?(s-this.dashProps.dashWidth)/2:0},this.dashProps)}}customElements.define("dashed-button",i);export{i as DashedButton};
