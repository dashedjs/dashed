function t(t,s,n){const{width:r,height:i}=s,a=e(s,n);!function(t,e,s,n){t.setAttribute("x1","0"),t.setAttribute("y1",`${s-n/2}`),t.setAttribute("x2",`${e}`),t.setAttribute("y2",`${s-n/2}`),t.setAttribute("stroke-width",`${n}`)}(t,r,i,a.dashWidth);const{strokeDasharray:d,strokeDashOffset:o}=function(t,s){const{width:n}=t,{dashWidth:r,dashLength:i,dashRatio:a}=e(t,s),d=1+Math.floor((n-i)/((1+a)*i)),o=Math.round((n-d*i)/(d-1)*Math.pow(10,3))/Math.pow(10,3);return{strokeDasharray:`${i} ${o}`,strokeDashOffset:"0",dashWidth:r}}(s,a);!function(t,e,s){t.setAttribute("stroke-dasharray",e),t.setAttribute("stroke-dashoffset",s)}(t,d,o)}function e(t,e){const{width:s}=t;let{dashWidth:n,dashLength:r,dashRatio:i}=e;if(n<0||r<0||i<0)throw new Error("dashWidth, dashLength and dashRatio must be positive numbers");return{dashWidth:n=n>s/2?s/2:n,dashLength:r=r>s?s:r,dashRatio:i=r*(1+i)>s?s-r:i}}const s='\n  <style title="Common styles">\n    :host{\n      --dashed-primary-color: rgba(54, 54, 231, 1);\n      --dashed-primary-light-color: rgba(54, 54, 231, 0.15);\n\n      --dashed-danger-color: rgba(250, 50, 50, 1);\n      --dashed-danger-light-color: rgba(250, 50, 50, 0.15);\n\n      --dashed-success-color: rgba(31, 141, 87, 1);\n      --dashed-success-light-color: rgba(31, 141, 87, 0.15);\n\n      --dashed-fill-color: var(--dashed-primary-light-color);\n      --dashed-outline-color: rgba(129, 129, 193);\n      z-index: 1;\n    }\n\n    :host(:focus) svg.dash {\n      outline: 1px solid var(--dashed-outline-color);\n      outline-offset: 1px;\n    }\n\n    :host([disabled]) {\n      opacity: 0.6;\n      pointer-events: none;\n    }\n\n    svg.dash {\n      position: absolute;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      fill: none;\n      z-index: -1;\n    }\n\n    svg.dash .border {\n      stroke: var(--dashed-primary-color);\n      fill: var(--dashed-fill-color);\n    }\n\n    svg.dash .border-bottom {\n      stroke: var(--dashed-primary-color);\n    }\n\n    svg.dash .background {\n      fill: var(--dashed-fill-color);\n    }\n  </style>\n';class n extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open",delegatesFocus:!0}),this.min=0,this.max=100,this.value=0,this.step=1,this.dashProps={dashWidth:2,dashLength:2,dashRatio:.5}}get disabled(){return this.hasAttribute("disabled")}set disabled(t){Boolean(t)?this.setAttribute("disabled",""):this.removeAttribute("disabled")}get min(){return this.getAttribute("min")}set min(t){this.setAttribute("min",t)}get max(){return this.getAttribute("max")}set max(t){this.setAttribute("max",t)}get value(){return this.getAttribute("value")}set value(t){this.setAttribute("value",t)}get step(){return this.hasAttribute("step")}set step(t){this.setAttribute("step",t)}get dashProps(){return this._dashProps}set dashProps(t){this._dashProps=t}connectedCallback(){this.render(),this.drawDash(),this._nativeInput=this.shadowRoot.querySelector("input"),this._nativeInput.addEventListener("input",this._onInputHandler.bind(this))}disconnectedCallback(){this._nativeInput.removeEventListener("input",this._onInputHandler.bind(this))}render(){const t=document.createElement("template");t.innerHTML=`\n      ${s}\n      <style>\n        :host {\n          --dashed-slider-width: 192px;\n          --dashed-slider-height: 24px;\n          --dashed-slider-cursor-radius: 6px;\n          --dashed-dash-width: 2px;\n\n          display: inline-flex;\n          align-items: center;\n          position: relative;\n          cursor: inherit;\n          outline: none;\n          min-width: var(--dashed-slider-width);\n        }\n\n        :host(:focus) svg.dash .slider-cursor-focus-ring {\n          opacity: 1;\n        }\n\n        .slider-container {\n          display: inline-flex;\n          justify-content: center;\n          align-items: center;\n          position: relative;\n          width: var(--dashed-slider-width);\n          height: var(--dashed-slider-height);\n        }\n\n        input[type="range"] {\n          margin: 0;\n          width: calc(100% - var(--dashed-slider-cursor-radius));\n          cursor: pointer;\n          opacity: 0;\n        }\n  \n        svg.dash .slider-background {\n          stroke: var(--dashed-primary-color);\n        }\n  \n        svg.dash .slider-tracker {\n          stroke: var(--dashed-danger-color);\n          opacity: 0.8;\n        }\n\n        svg.dash .slider-cursor {\n          will-change: transform;\n        }\n\n        svg.dash .slider-cursor-inner {\n          fill: var(--dashed-danger-color);\n        }\n\n        svg.dash .slider-cursor-focus-ring {\n          fill: rgba(255, 0, 0, 0.5);\n          opacity: 0;\n        }\n      </style>\n      <label for="range"><slot></slot></label>\n      <div class="slider-container">\n        <input type="range" id="range" min="${this.min}" max="${this.max}"\n          step="${this.step}" value="${this.value}" />\n        <svg class="dash">\n          <line class="slider-background" />\n          <line class="slider-tracker" />\n          <g class="slider-cursor">\n            <circle class="slider-cursor-focus-ring" />\n            <circle class="slider-cursor-inner" />\n          </g>\n        </svg>\n      </div>\n    `,this.shadowRoot.appendChild(t.content.cloneNode(!0))}_onInputHandler(t){this.value=parseFloat(t.target.value);const e=(this.value-this.min)/(this.max-this.min),s=this.shadowRoot.querySelector("svg.dash");s.querySelector(".slider-cursor").style.transform=`translateX(${180*e}px)`,s.querySelector(".slider-tracker").setAttribute("x2",180*e)}drawDash(){const e=this.shadowRoot.querySelector("svg.dash"),{width:s,height:n}=this.shadowRoot.querySelector(".slider-container").getBoundingClientRect(),r=e.querySelector(".slider-cursor"),i=r.querySelector(".slider-cursor-inner");i.setAttribute("stroke-width",`${this.dashProps.dashWidth}`),i.setAttribute("cx","6"),i.setAttribute("cy",`${n/2}`),i.setAttribute("r","6");const a=r.querySelector(".slider-cursor-focus-ring");a.setAttribute("stroke-width",`${this.dashProps.dashWidth}`),a.setAttribute("cx","6"),a.setAttribute("cy",`${n/2}`),a.setAttribute("r","9");const d=e.querySelector(".slider-background"),o=s-12,h={width:o,height:n};let l={...this.dashProps};t(d,h,l),d.setAttribute("transform",`translate(6 ${-n/2})`);const c=e.querySelector(".slider-tracker");t(c,h,l),c.setAttribute("transform",`translate(6 ${-n/2})`);const u=(this.value-this.min)/(this.max-this.min);r.style.transform=`translateX(${u*o}px)`,c.setAttribute("x2",`${u*o}`)}}customElements.define("dashed-slider",n);export{n as DashedSlider};
