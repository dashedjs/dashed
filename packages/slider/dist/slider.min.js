const t='\n  <style title="Common styles">\n    :host{\n      --dashed-primary-color: rgba(54, 54, 231, 1);\n      --dashed-primary-light-color: rgba(54, 54, 231, 0.15);\n\n      --dashed-danger-color: rgba(250, 50, 50, 1);\n      --dashed-danger-light-color: rgba(250, 50, 50, 0.15);\n\n      --dashed-success-color: rgba(31, 141, 87, 1);\n      --dashed-success-light-color: rgba(31, 141, 87, 0.15);\n\n      --dashed-fill-color: var(--dashed-primary-light-color);\n      --dashed-outline-color: rgba(129, 129, 193);\n      z-index: 1;\n    }\n\n    :host(:focus) > * {\n      outline: 1px solid var(--dashed-outline-color);\n      outline-offset: 1px;\n    }\n\n    :host([disabled]) {\n      opacity: 0.6;\n      pointer-events: none;\n    }\n\n    svg.dash {\n      position: absolute;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      fill: none;\n      z-index: -1;\n    }\n\n    svg.dash .border {\n      stroke: var(--dashed-primary-color);\n      fill: var(--dashed-fill-color);\n    }\n\n    svg.dash .border-bottom {\n      stroke: var(--dashed-primary-color);\n    }\n\n    svg.dash .background {\n      fill: var(--dashed-fill-color);\n    }\n  </style>\n';class n extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open",delegatesFocus:!0}),this.min="0",this.max="100",this.value="30",this.step="1",this.dashWidth="2",this.dashLength="2",this.dashSpacing="1"}get disabled(){return this.hasAttribute("disabled")}set disabled(t){Boolean(t)?this.setAttribute("disabled",""):this.removeAttribute("disabled")}get min(){return this.getAttribute("min")}set min(t){this.setAttribute("min",t)}get max(){return this.getAttribute("max")}set max(t){this.setAttribute("max",t)}get value(){return this.getAttribute("value")}set value(t){this.setAttribute("value",t)}get step(){return this.hasAttribute("step")}set step(t){this.setAttribute("step",t)}get dashWidth(){return this.getAttribute("dash-width")}set dashWidth(t){this.setAttribute("dash-width",t)}get dashLength(){return this.getAttribute("dash-length")}set dashLength(t){this.setAttribute("dash-length",t)}get dashSpacing(){return this.getAttribute("dash-spacing")}set dashSpacing(t){this.setAttribute("dash-spacing",t)}connectedCallback(){this.render(),this._nativeInput=this.shadowRoot.querySelector("input"),this._nativeInput.addEventListener("input",this._onInputHandler.bind(this))}disconnectedCallback(){this._nativeInput.removeEventListener("input",this._onInputHandler.bind(this))}render(){const[n,e,s]=[this.min,this.max,this.value].map(t=>parseFloat(t)),r=`${(s-n)/(e-n)*100}%`,i=document.createElement("template");i.innerHTML=`\n      ${t}\n      <style>\n        :host {\n          --dashed-background-width: 100%;\n          display: inline-block;\n          position: relative;\n          cursor: inherit;\n          outline: none;\n        }\n\n        :host(:focus) svg.dash .slider-cursor-focus-ring {\n          opacity: 1;\n        }\n\n        .slider-container {\n          display: inline-flex;\n          justify-content: center;\n          align-items: center;\n          position: relative;\n          min-width: 192px;\n          height: 24px;\n        }\n\n        input[type="range"] {\n          margin: 0;\n          width: calc(100% - 8px);\n          cursor: pointer;\n          opacity: 0;\n        }\n\n        svg.dash {\n          box-sizing: border-box;\n          padding: 0 8px;\n        }\n  \n        svg.dash .slider-background {\n          stroke: var(--dashed-primary-color);\n        }\n  \n        svg.dash .slider-tracker {\n          stroke: var(--dashed-danger-color);\n          opacity: 0.8;\n        }\n\n        svg.dash .slider-cursor {\n          will-change: transform;\n        }\n\n        svg.dash .slider-cursor-inner {\n          fill: var(--dashed-danger-color);\n        }\n\n        svg.dash .slider-cursor-focus-ring {\n          fill: rgba(255, 0, 0, 0.5);\n          opacity: 0;\n        }\n      </style>\n      <label for="range"><slot></slot></label>\n      <div class="slider-container">\n        <input type="range" id="range"\n          min="${this.min}" max="${this.max}" step="${this.step}" value="${this.value}" />\n        <svg class="dash" stroke-width="${this.dashWidth}">\n          <line class="slider-background" x2="100%" y2="0"  transform="translate(0, 12)"\n            stroke-dasharray="${this.dashLength} ${this.dashSpacing}" />\n          <line class="slider-tracker" x2="${r}" y2="0"  transform="translate(0, 12)"\n            stroke-dasharray="${this.dashLength} ${this.dashSpacing}" />\n          <g class="slider-cursor" style="transform: translate(calc(${r} - 6px), 0)">\n            <circle class="slider-cursor-focus-ring" cx="6" cy="12" r="9" />\n            <circle class="slider-cursor-inner" cx="6" cy="12" r="6"  />\n          </g>\n        </svg>\n      </div>\n    `,this.shadowRoot.appendChild(i.content.cloneNode(!0))}_onInputHandler(t){this.value=parseFloat(t.target.value);const[n,e,s]=[this.min,this.max,this.value].map(t=>parseFloat(t)),r=`${(s-n)/(e-n)*100}%`,i=this.shadowRoot.querySelector("svg.dash");i.querySelector(".slider-cursor").style.transform=`translateX(calc(${r} - 6px))`,i.querySelector(".slider-tracker").setAttribute("x2",r)}}customElements.define("dashed-slider",n);export{n as DashedSlider};
