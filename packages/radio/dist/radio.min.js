const n='\n  <style title="Common styles">\n    :host{\n      --dashed-primary-color: rgba(54, 54, 231, 1);\n      --dashed-primary-light-color: rgba(54, 54, 231, 0.15);\n\n      --dashed-danger-color: rgba(250, 50, 50, 1);\n      --dashed-danger-light-color: rgba(250, 50, 50, 0.15);\n\n      --dashed-success-color: rgba(31, 141, 87, 1);\n      --dashed-success-light-color: rgba(31, 141, 87, 0.15);\n\n      --dashed-fill-color: var(--dashed-primary-light-color);\n      --dashed-outline-color: rgba(129, 129, 193);\n      z-index: 1;\n    }\n\n    :host(:focus) > * {\n      outline: 1px solid var(--dashed-outline-color);\n      outline-offset: 1px;\n    }\n\n    :host([disabled]) {\n      opacity: 0.6;\n      pointer-events: none;\n    }\n\n    svg.dash {\n      position: absolute;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      fill: none;\n      z-index: -1;\n    }\n\n    svg.dash .border {\n      stroke: var(--dashed-primary-color);\n      fill: var(--dashed-fill-color);\n    }\n\n    svg.dash .border-bottom {\n      stroke: var(--dashed-primary-color);\n    }\n\n    svg.dash .background {\n      fill: var(--dashed-fill-color);\n    }\n  </style>\n';class t extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open",delegatesFocus:!0}),this.borderRadius="12",this.dashWidth="2",this.dashLength="4",this.dashSpacing="2"}get disabled(){return this.hasAttribute("disabled")}set disabled(n){Boolean(n)?this.setAttribute("disabled",""):this.removeAttribute("disabled")}get checked(){return this.hasAttribute("checked")}set checked(n){Boolean(n)?this.setAttribute("checked",""):this.removeAttribute("checked")}get borderRadius(){return this.getAttribute("border-radius")}set borderRadius(n){this.setAttribute("border-radius",n)}get dashWidth(){return this.getAttribute("dash-width")}set dashWidth(n){this.setAttribute("dash-width",n)}get dashLength(){return this.getAttribute("dash-length")}set dashLength(n){this.setAttribute("dash-length",n)}get dashSpacing(){return this.getAttribute("dash-spacing")}set dashSpacing(n){this.setAttribute("dash-spacing",n)}connectedCallback(){this.render()}render(){const t=document.createElement("template");t.innerHTML=`\n      ${n}\n      <style>\n        :host {\n          display: inline-flex;\n          align-items: center;\n          justify-content: center;\n          position: relative;\n          cursor: inherit;\n          outline: none;\n        }\n\n        .radio-container {\n          display: inline-block;\n          position: relative;\n          width: 24px;\n          height: 24px;\n\n          border: ${this.dashWidth}px solid;\n          border-image: ${function(n,t,e,s="0"){const[i,r,d,a]=[n,t,e,s].map(n=>parseFloat(n)),o=i+a,h=i+a;return`url("data:image/svg+xml;utf8,${`\n    <svg\n      xmlns='http://www.w3.org/2000/svg'\n      width='${d+r+2*i+2*a}'\n      height='${d+r+2*i+2*a}'\n      viewBox='0 0 ${d+r+2*i+2*a} ${d+r+2*i+2*a}'\n      stroke-width='${i}'\n      stroke='blue'>\n        <path\n          stroke-width='${i}'\n          d='M${i+a+d/2} ${i/2}h${r}m${d/2+a+i/2} ${i/2+a+d/2}v${r}m${-i/2-a-d/2} ${d/2+a+i/2}h${-r}m${-d/2-a-i/2} ${-i/2-a-d/2}v${-r}'/>\n\n        ${a>0?`<path\n              fill='none'\n              d='M${i/2} ${i+a-d/2}a${a} ${a} 0 0 1 ${i/2+a-d/2} ${-a-i/2+d/2}m${r+2*d} 0a${a} ${a} 0 0 1 ${a+i/2-d/2} ${i/2+a-d/2}m0 ${r+2*d}a${a} ${a} 0 0 1 ${-i/2-a+d/2} ${a+i/2-d/2}m${-r-2*d} 0a${a} ${a} 0 0 1 ${-a-i/2+d/2} ${-i/2-a+d/2}'/>`:""}\n    </svg>`.replace(/\n|\r|\t/gm,"")}") ${o} / ${h} round`}(this.dashWidth,this.dashLength,this.dashSpacing,this.borderRadius)};\n        }\n\n        .radio-container::before {\n          content: "";\n          position: absolute;\n          top: 0;\n          left: 0;\n          width: 100%;\n          height: 100%;\n\n          border-radius: ${this.borderRadius}px;\n          background: var(--dashed-primary-light-color);\n        }\n\n        input[type="radio"] {\n          margin: 0;\n          width: 100%;\n          height: 100%;\n          opacity: 0;\n        }\n  \n        svg.dash .inner-circle {\n          fill: var(--dashed-danger-color);\n        }\n\n        input[type="radio"]:not(:checked) ~ svg.dash .inner-circle {\n          opacity: 0;\n        }\n\n        input[type="radio"]:checked ~ svg.dash .inner-circle {\n          opacity: 1;\n        }\n      </style>\n      <div class="radio-container">\n        <input type="radio" id="radio" />\n        <svg class="dash">\n          <circle class="inner-circle" cx="12" cy="12" r="5" />\n        </svg>\n      </svg>\n      </div>\n      <label for="radio"><slot></slot></label>\n    `,this.shadowRoot.appendChild(t.content.cloneNode(!0))}}customElements.define("dashed-radio",t);export{t as DashedRadio};
