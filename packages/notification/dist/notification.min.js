const n='\n  <style title="Common styles">\n    :host{\n      --dashed-primary-color: rgba(54, 54, 231, 1);\n      --dashed-primary-light-color: rgba(54, 54, 231, 0.15);\n\n      --dashed-danger-color: rgba(250, 50, 50, 1);\n      --dashed-danger-light-color: rgba(250, 50, 50, 0.15);\n\n      --dashed-success-color: rgba(31, 141, 87, 1);\n      --dashed-success-light-color: rgba(31, 141, 87, 0.15);\n\n      --dashed-fill-color: var(--dashed-primary-light-color);\n      --dashed-outline-color: rgba(129, 129, 193);\n      z-index: 1;\n    }\n\n    :host(:focus) > * {\n      outline: 1px solid var(--dashed-outline-color);\n      outline-offset: 1px;\n    }\n\n    :host([disabled]) {\n      opacity: 0.6;\n      pointer-events: none;\n    }\n\n    svg.dash {\n      position: absolute;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      fill: none;\n      z-index: -1;\n    }\n\n    svg.dash .border {\n      stroke: var(--dashed-primary-color);\n      fill: var(--dashed-fill-color);\n    }\n\n    svg.dash .border-bottom {\n      stroke: var(--dashed-primary-color);\n    }\n\n    svg.dash .background {\n      fill: var(--dashed-fill-color);\n    }\n  </style>\n';class t extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open",delegatesFocus:!0}),this.dashProps={dashWidth:2,dashLength:10,dashRatio:.1},this.borderRadius="0",this.dashWidth="1",this.dashLength="10",this.dashSpacing="4"}connectedCallback(){this.render()}render(){const t=document.createElement("template");t.innerHTML=`\n      ${n}\n      <style>\n        :host {\n          display: inline-block;\n          position: relative;\n          cursor: inherit;\n          outline: none;\n        }\n\n        .notification {\n          box-sizing: border-box;\n          min-height: 48px;\n          min-width: 128px;\n          max-width: 100%;\n          white-space: normal;\n          display: grid;\n          grid-template-columns: 32px auto 32px;\n          justify-items: center;\n          align-items: center;\n          position: relative;\n          padding: 4px;\n\n          border: ${this.dashWidth}px solid;\n          border-image: ${function(n,t,i,o="0"){const[e,s,a,d]=[n,t,i,o].map(n=>parseFloat(n)),r=e+d,l=e+d;return`url("data:image/svg+xml;utf8,${`\n    <svg\n      xmlns='http://www.w3.org/2000/svg'\n      width='${a+s+2*e+2*d}'\n      height='${a+s+2*e+2*d}'\n      viewBox='0 0 ${a+s+2*e+2*d} ${a+s+2*e+2*d}'\n      stroke-width='${e}'\n      stroke='blue'>\n        <path\n          stroke-width='${e}'\n          d='M${e+d+a/2} ${e/2}h${s}m${a/2+d+e/2} ${e/2+d+a/2}v${s}m${-e/2-d-a/2} ${a/2+d+e/2}h${-s}m${-a/2-d-e/2} ${-e/2-d-a/2}v${-s}'/>\n\n        ${d>0?`<path\n              fill='none'\n              d='M${e/2} ${e+d-a/2}a${d} ${d} 0 0 1 ${e/2+d-a/2} ${-d-e/2+a/2}m${s+2*a} 0a${d} ${d} 0 0 1 ${d+e/2-a/2} ${e/2+d-a/2}m0 ${s+2*a}a${d} ${d} 0 0 1 ${-e/2-d+a/2} ${d+e/2-a/2}m${-s-2*a} 0a${d} ${d} 0 0 1 ${-d-e/2+a/2} ${-e/2-d+a/2}'/>`:""}\n    </svg>`.replace(/\n|\r|\t/gm,"")}") ${r} / ${l} round`}(this.dashWidth,this.dashLength,this.dashSpacing,this.borderRadius)};\n        }\n\n        .notification__icon {\n          /* display: inline-block; */\n        }\n\n        .notification__message {\n        }\n\n        .notification__button {\n          display: inline-block;\n          cursor: pointer;\n          background: none;\n          border: none;\n          width: 32px;\n          height: 32px;\n          margin: 0;\n        }\n      </style>\n      <div class="notification">\n        <span class="notification__icon">ico</span>\n        <div class="notification__message">Here is an example of notification.</div>\n        <button class="notification__button">x</button>\n      </div>\n    `,this.shadowRoot.appendChild(t.content.cloneNode(!0))}}customElements.define("dashed-notification",t);export{t as DashedNotification};
