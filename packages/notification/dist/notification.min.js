function n(n,o,a){const{width:d,height:h,borderRadius:r}=o,c=t(o,a);!function(n,t,i,e,s){n.setAttribute("stroke-width",`${s}`),n.setAttribute("x",`${s/2}`),n.setAttribute("y",`${s/2}`),n.setAttribute("width",`${t-s}`),n.setAttribute("height",`${i-s}`),n.setAttribute("rx",`${e}`),n.setAttribute("ry",`${e}`)}(n,d,h,r,c.dashWidth);const{strokeDasharray:l,strokeDashOffset:u}=function(n,o){const{width:a,height:d,borderRadius:h}=n,{dashWidth:r,dashLength:c,dashRatio:l}=t(n,o),u=a-r-2*h,g=d-r-2*h,f=2*Math.PI*h/4,p=i(u,{dashWidth:r,dashLength:c,dashRatio:l}),b=i(g,{dashWidth:r,dashLength:c,dashRatio:l}),m=i(f,{dashWidth:r,dashLength:c,dashRatio:l}),w=e(u,p,c),v=e(g,b,c),y=e(f,m,c),x=s(p,w,y,c),$=s(m,y,v,c),k=s(b,v,y,c),R=s(m,y,w,c);return{strokeDasharray:`${x}${$}${k}${R}`.trim(),strokeDashOffset:`${-w}`,dashWidth:r}}(o,c);!function(n,t,i){n.setAttribute("stroke-dasharray",t),n.setAttribute("stroke-dashoffset",i)}(n,l,u)}function t(n,t){const{width:i,height:e}=n;let{dashWidth:s,dashLength:o,dashRatio:a}=t;if(s<0||o<0||a<0)throw new Error("dashWidth, dashLength and dashRatio must be positive numbers");const d=Math.min(i,e);return{dashWidth:s=s>d/2?d/2:s,dashLength:o=o>d?d:o,dashRatio:a=o*(1+a)>d?d-o:a}}function i(n,t){const{dashLength:i,dashRatio:e}=t;return n-e*i<=0?0:Math.floor((n-e*i)/((1+e)*i))}function e(n,t,i){return 0===t?n/2:Math.round((n-t*i)/(t+1)*Math.pow(10,3))/Math.pow(10,3)}function s(n,t,i,e){return 0===n?`0 ${t+i} `:`${e} ${t} `.repeat(n-1)+`${e} ${t+i} `}const o='\n  <style title="Common styles">\n    :host{\n      --dashed-primary-color: rgba(54, 54, 231, 1);\n      --dashed-primary-light-color: rgba(54, 54, 231, 0.15);\n\n      --dashed-danger-color: rgba(250, 50, 50, 1);\n      --dashed-danger-light-color: rgba(250, 50, 50, 0.15);\n\n      --dashed-success-color: rgba(31, 141, 87, 1);\n      --dashed-success-light-color: rgba(31, 141, 87, 0.15);\n\n      --dashed-fill-color: var(--dashed-primary-light-color);\n      --dashed-outline-color: rgba(129, 129, 193);\n      z-index: 1;\n    }\n\n    :host(:focus) svg.dash {\n      outline: 1px solid var(--dashed-outline-color);\n      outline-offset: 1px;\n    }\n\n    :host([disabled]) {\n      opacity: 0.6;\n      pointer-events: none;\n    }\n\n    svg.dash {\n      position: absolute;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      fill: none;\n      z-index: -1;\n    }\n\n    svg.dash .border {\n      stroke: var(--dashed-primary-color);\n      fill: var(--dashed-fill-color);\n    }\n\n    svg.dash .border-bottom {\n      stroke: var(--dashed-primary-color);\n    }\n\n    svg.dash .background {\n      fill: var(--dashed-fill-color);\n    }\n  </style>\n';class a extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open",delegatesFocus:!0}),this.dashProps={dashWidth:2,dashLength:10,dashRatio:.1}}connectedCallback(){this.render(),this.drawDash(),window.addEventListener("resize",this.drawDash.bind(this))}disconnectedCallback(){window.removeEventListener("resize",this.drawDash.bind(this))}render(){const n=document.createElement("template");n.innerHTML=`\n      ${o}\n      <style>\n        :host {\n          --dashed-notification-min-width: 256px;\n          --dashed-notification-max-width: 512px;\n          --dashed-notification-min-height: 48px;\n          --dashed-notification-padding: 8px;\n\n          display: inline-flex;\n          align-items: center;\n          justify-content: center;\n          position: relative;\n          cursor: inherit;\n          outline: none;\n          min-height: var(--dashed-notification-min-height);\n          min-width: var(--dashed-notification-min-width);\n          max-width: var(--dashed-notification-max-width);\n        }\n\n        .notification {\n          display: grid;\n          grid-template-columns: 32px auto 32px;\n          justify-items: center;\n          align-items: center;\n          position: relative;\n          width: 100%;\n          height: 100%;\n          padding: var(--dashed-notification-padding);\n        }\n\n        .notification__icon {\n          /* display: inline-block; */\n        }\n\n        .notification__message {\n        }\n\n        .notification__button {\n          display: inline-block;\n          cursor: pointer;\n          background: none;\n          border: none;\n          width: 32px;\n          height: 32px;\n          margin: 0;\n        }\n      </style>\n      <div class="notification">\n        <span class="notification__icon">ico</span>\n        <div class="notification__message">Here is an example of notification.</div>\n        <button class="notification__button">x</button>\n        <svg class="dash">\n          <rect class="border" />\n        </svg>\n      </div>\n    `,this.shadowRoot.appendChild(n.content.cloneNode(!0))}drawDash(){const t=this.shadowRoot.querySelector("svg.dash").querySelector(".border"),{width:i,height:e}=this.getBoundingClientRect();n(t,{width:i,height:e,borderRadius:this.rounded?(e-this.dashProps.dashWidth)/2:0},this.dashProps)}}customElements.define("dashed-notification",a);export{a as DashedNotification};
