function t(t,a,r){const{width:o,height:d,borderRadius:i}=a,l=e(a,r);!function(t,e,s,n,h){t.setAttribute("stroke-width",`${h}`),t.setAttribute("x",`${h/2}`),t.setAttribute("y",`${h/2}`),t.setAttribute("width",`${e-h}`),t.setAttribute("height",`${s-h}`),t.setAttribute("rx",`${n}`),t.setAttribute("ry",`${n}`)}(t,o,d,i,l.dashWidth);const{strokeDasharray:c,strokeDashOffset:g}=function(t,a){const{width:r,height:o,borderRadius:d}=t,{dashWidth:i,dashLength:l,dashRatio:c}=e(t,a),g=r-i-2*d,u=o-i-2*d,b=2*Math.PI*d/4,p=s(g,{dashWidth:i,dashLength:l,dashRatio:c}),f=s(u,{dashWidth:i,dashLength:l,dashRatio:c}),v=s(b,{dashWidth:i,dashLength:l,dashRatio:c}),m=n(g,p,l),w=n(u,f,l),y=n(b,v,l),k=h(p,m,y,l),$=h(v,y,w,l),x=h(f,w,y,l),A=h(v,y,m,l);return{strokeDasharray:`${k}${$}${x}${A}`.trim(),strokeDashOffset:`${-m}`,dashWidth:i}}(a,l);!function(t,e,s){t.setAttribute("stroke-dasharray",e),t.setAttribute("stroke-dashoffset",s)}(t,c,g)}function e(t,e){const{width:s,height:n}=t;let{dashWidth:h,dashLength:a,dashRatio:r}=e;if(h<0||a<0||r<0)throw new Error("dashWidth, dashLength and dashRatio must be positive numbers");const o=Math.min(s,n);return{dashWidth:h=h>o/2?o/2:h,dashLength:a=a>o?o:a,dashRatio:r=a*(1+r)>o?o-a:r}}function s(t,e){const{dashLength:s,dashRatio:n}=e;return t-n*s<=0?0:Math.floor((t-n*s)/((1+n)*s))}function n(t,e,s){return 0===e?t/2:Math.round((t-e*s)/(e+1)*Math.pow(10,3))/Math.pow(10,3)}function h(t,e,s,n){return 0===t?`0 ${e+s} `:`${n} ${e} `.repeat(t-1)+`${n} ${e+s} `}const a='\n  <style title="Common styles">\n    :host{\n      --dashed-primary-color: rgba(54, 54, 231, 1);\n      --dashed-primary-light-color: rgba(54, 54, 231, 0.15);\n\n      --dashed-danger-color: rgba(250, 50, 50, 1);\n      --dashed-danger-light-color: rgba(250, 50, 50, 0.15);\n\n      --dashed-success-color: rgba(31, 141, 87, 1);\n      --dashed-success-light-color: rgba(31, 141, 87, 0.15);\n\n      --dashed-fill-color: var(--dashed-primary-light-color);\n      --dashed-outline-color: rgba(129, 129, 193);\n      z-index: 1;\n    }\n\n    :host(:focus) svg.dash {\n      outline: 1px solid var(--dashed-outline-color);\n      outline-offset: 1px;\n    }\n\n    :host([disabled]) {\n      opacity: 0.6;\n      pointer-events: none;\n    }\n\n    svg.dash {\n      position: absolute;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      fill: none;\n      z-index: -1;\n    }\n\n    svg.dash .border {\n      stroke: var(--dashed-primary-color);\n      fill: var(--dashed-fill-color);\n    }\n\n    svg.dash .border-bottom {\n      stroke: var(--dashed-primary-color);\n    }\n\n    svg.dash .background {\n      fill: var(--dashed-fill-color);\n    }\n  </style>\n';class r extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open",delegatesFocus:!0}),this.dashProps={dashWidth:2,dashLength:4,dashRatio:.5}}get disabled(){return this.hasAttribute("disabled")}set disabled(t){Boolean(t)?this.setAttribute("disabled",""):this.removeAttribute("disabled")}get checked(){return this.hasAttribute("checked")}set checked(t){Boolean(t)?this.setAttribute("checked",""):this.removeAttribute("checked")}get dashProps(){return this._dashProps}set dashProps(t){this._dashProps=t}connectedCallback(){this.render(),this.drawDash()}render(){const t=document.createElement("template");t.innerHTML=`\n      ${a}\n      <style>\n        :host {\n          --dashed-toggle-width: 48px;\n          --dashed-toggle-height: 24px;\n          --dashed-dash-width: 2px;\n\n          display: inline-flex;\n          align-items: center;\n          justify-content: center;\n          position: relative;\n          cursor: pointer;\n          outline: none;\n          min-width: 48px;\n        }\n\n        .toggle-container {\n          display: inline-flex;\n          position: relative;\n          width: var(--dashed-toggle-width);\n          height: var(--dashed-toggle-height);\n        }\n\n        label {\n          display: inline-flex;\n          align-items: center;\n          width: 100%;\n          height: 100%;\n        }\n\n        input[type="checkbox"] {\n          margin: 0;\n          width: var(--dashed-toggle-width);\n          height: var(--dashed-toggle-height);\n          cursor: pointer;\n          opacity: 0;\n        }\n  \n        svg.dash .toggle-background {\n          stroke: var(--dashed-primary-color);\n          fill: var(--dashed-fill-color);\n        }\n  \n        svg.dash .toggle-switcher {\n          fill: var(--dashed-primary-color);\n          transition: transform 100ms ease-in-out;\n          will-change: transform;\n        }\n\n        input[type="checkbox"]:checked ~ svg.dash .toggle-switcher {\n          transform: translateX(var(--dashed-toggle-height));\n          fill: var(--dashed-danger-color);\n        }\n\n        input[type="checkbox"]:not(:checked) ~ svg.dash .toggle-switcher {\n          transform: translateX(- var(--dashed-toggle-height));\n        }\n      </style>\n      <div class="toggle-container">\n        <input type="checkbox" id="toggle" />\n        <svg class="dash">\n          <rect class="toggle-background" />\n          <circle class="toggle-switcher" />\n        </svg>\n      </div>\n      <label for="toggle"><slot></slot></label>\n    `,this.shadowRoot.appendChild(t.content.cloneNode(!0))}drawDash(){const e=this.shadowRoot.querySelector("svg.dash"),s=e.querySelector(".toggle-background"),[n,h]=[48,24],[a,r]=[6,10];t(s,{width:n-a,height:h-r,borderRadius:(h-r-this.dashProps.dashWidth)/2},this.dashProps),s.setAttribute("transform",`translate(${a/2} ${r/2})`);const o=e.querySelector(".toggle-switcher");o.setAttribute("stroke-width",`${this.dashProps.dashWidth}`),o.setAttribute("cx",`${h/2}`),o.setAttribute("cy",`${h/2}`),o.setAttribute("r",`${(h-this.dashProps.dashWidth)/2}`)}}customElements.define("dashed-toggle",r);export{r as DashedToggle};
