function t(t,e,s){const{width:o,height:i}=e,a=n(e,s);!function(t,n,e,s){const o=(Math.min(n,e)-s)/2;t.setAttribute("stroke-width",`${s}`),t.setAttribute("cx",`${n/2}`),t.setAttribute("cy",`${e/2}`),t.setAttribute("r",`${o}`)}(t,o,i,a.dashWidth);const{strokeDasharray:r,strokeDashOffset:h}=function(t,e){const{width:s,height:o}=t,{dashWidth:i,dashLength:a,dashRatio:r}=n(t,e),h=(Math.min(s,o)-i)/2,d=2*Math.PI*h,l=Math.floor((d-r*a)/((1+r)*a)),c=Math.round((d-l*a)/(l+1)*Math.pow(10,3))/Math.pow(10,3);return{strokeDasharray:`${a} ${c}`,strokeDashOffset:"0",dashWidth:i}}(e,a);!function(t,n,e){t.setAttribute("stroke-dasharray",n),t.setAttribute("stroke-dashoffset",e)}(t,r,h)}function n(t,n){const{width:e,height:s}=t;let{dashWidth:o,dashLength:i,dashRatio:a}=n;if(o<0||i<0||a<0)throw new Error("dashWidth, dashLength and dashRatio must be positive numbers");const r=Math.min(e,s);return{dashWidth:o=o>r/2?r/2:o,dashLength:i=i>r?r:i,dashRatio:a=i*(1+a)>r?r-i:a}}const e='\n  <style title="Common styles">\n    :host{\n      --dashed-primary-color: rgba(54, 54, 231, 1);\n      --dashed-primary-light-color: rgba(54, 54, 231, 0.15);\n\n      --dashed-danger-color: rgba(250, 50, 50, 1);\n      --dashed-danger-light-color: rgba(250, 50, 50, 0.15);\n\n      --dashed-success-color: rgba(31, 141, 87, 1);\n      --dashed-success-light-color: rgba(31, 141, 87, 0.15);\n\n      --dashed-fill-color: var(--dashed-primary-light-color);\n      --dashed-outline-color: rgba(129, 129, 193);\n      z-index: 1;\n    }\n\n    :host(:focus) svg.dash {\n      outline: 1px solid var(--dashed-outline-color);\n      outline-offset: 1px;\n    }\n\n    :host([disabled]) {\n      opacity: 0.6;\n      pointer-events: none;\n    }\n\n    svg.dash {\n      position: absolute;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      fill: none;\n      z-index: -1;\n    }\n\n    svg.dash .border {\n      stroke: var(--dashed-primary-color);\n      fill: var(--dashed-fill-color);\n    }\n\n    svg.dash .border-bottom {\n      stroke: var(--dashed-primary-color);\n    }\n\n    svg.dash .background {\n      fill: var(--dashed-fill-color);\n    }\n  </style>\n';class s extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open",delegatesFocus:!0}),this.dashProps={dashWidth:2,dashLength:4,dashRatio:.5},this._firstRender=!0}get disabled(){return this.hasAttribute("disabled")}set disabled(t){Boolean(t)?this.setAttribute("disabled",""):this.removeAttribute("disabled")}get ariaLabel(){return this.hasAttribute("aria-label")}set ariaLabel(t){Boolean(t)?this.setAttribute("aria-label",t):this.removeAttribute("aria-label")}get dashProps(){return this._dashProps}set dashProps(t){this._dashProps=t}connectedCallback(){this.render(),this.updateIcon(),this._firstRender=!1}updateIcon(){this._icon=this.shadowRoot.querySelector('slot[name="icon"]').assignedNodes()[0],this._icon&&"DashedIcon"===this._icon.constructor.name?this._icon.addEventListener("iconloaded",this.drawDash.bind(this)):this.drawDash()}disconnectedCallback(){this._icon&&this._icon.removeEventListener("iconloaded",this.drawDash.bind(this))}render(){const t=document.createElement("template");t.innerHTML=`\n      ${e}\n      <style>\n        :host {\n          display: inline-block;\n          cursor: pointer;\n          outline: none;\n          position: relative;\n        }\n\n        :host(:hover) button {\n          color: var(--dashed-danger-color);\n        }\n\n        .button-container {\n          display: inline-flex;\n          align-items: center;\n          justify-content: center;\n          position: relative;\n          width: 56px;\n          height: 56px;\n        }\n\n        button {\n          width: 48px;\n          height: 48px;\n          display: inline-flex;\n          align-items: center;\n          justify-content: center;\n          background: none;\n          cursor: inherit;\n          border: none;\n          outline: none;\n          position: relative;\n          transition: color 50ms ease-in-out;\n        }\n\n        svg.dash .circles {\n          will-change: transform;\n        }\n\n        svg.dash .outer-circle,\n        svg.dash .inner-circle {\n          stroke: var(--dashed-primary-color);\n        }\n      </style>\n      <div class="button-container">\n        <button type="button" aria-label="${this.ariaLabel}">\n          <slot name="icon"></slot>\n        </button>\n        <svg class="dash">\n          <g class="circles">\n            <circle class="outer-circle" id="outer"  filter="url(#shadow2)"/>\n            <circle class="inner-circle" />\n          </g>\n          <filter id="shadow2">\n            <feDropShadow dx="2" dy="2" stdDeviation="2" flood-opacity="0.9" />\n          </filter>\n          <mask id="mask">\n            <use href="#outer" fill="black" stroke="white" />\n          </mask>\n        </svg>\n      </div>\n    `,this.shadowRoot.appendChild(t.content.cloneNode(!0))}drawDash(){const n=this.shadowRoot.querySelector("svg.dash"),[e,s]=[48,48],o=n.querySelector(".circles");t(o.querySelector(".outer-circle"),{width:e,height:s},this.dashProps);const i=o.querySelector(".inner-circle");t(i,{width:e-12,height:s-12},this.dashProps),i.setAttribute("transform","translate(6 6)"),o.style.transform="translate(4px, 4px)"}}customElements.define("dashed-fab",s);export{s as DashedFab};
