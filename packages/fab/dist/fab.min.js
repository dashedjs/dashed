function t(t,n,e,s="0"){const[i,o,r,a]=[t,n,e,s].map(t=>parseFloat(t)),d=i+a,h=i+a;return`url("data:image/svg+xml;utf8,${`\n    <svg\n      xmlns='http://www.w3.org/2000/svg'\n      width='${r+o+2*i+2*a}'\n      height='${r+o+2*i+2*a}'\n      viewBox='0 0 ${r+o+2*i+2*a} ${r+o+2*i+2*a}'\n      stroke-width='${i}'\n      stroke='blue'>\n        <path\n          stroke-width='${i}'\n          d='M${i+a+r/2} ${i/2}h${o}m${r/2+a+i/2} ${i/2+a+r/2}v${o}m${-i/2-a-r/2} ${r/2+a+i/2}h${-o}m${-r/2-a-i/2} ${-i/2-a-r/2}v${-o}'/>\n\n        ${a>0?`<path\n              fill='none'\n              d='M${i/2} ${i+a-r/2}a${a} ${a} 0 0 1 ${i/2+a-r/2} ${-a-i/2+r/2}m${o+2*r} 0a${a} ${a} 0 0 1 ${a+i/2-r/2} ${i/2+a-r/2}m0 ${o+2*r}a${a} ${a} 0 0 1 ${-i/2-a+r/2} ${a+i/2-r/2}m${-o-2*r} 0a${a} ${a} 0 0 1 ${-a-i/2+r/2} ${-i/2-a+r/2}'/>`:""}\n    </svg>`.replace(/\n|\r|\t/gm,"")}") ${d} / ${h} round`}const n='\n  <style title="Common styles">\n    :host{\n      --dashed-primary-color: rgba(54, 54, 231, 1);\n      --dashed-primary-light-color: rgba(54, 54, 231, 0.15);\n\n      --dashed-danger-color: rgba(250, 50, 50, 1);\n      --dashed-danger-light-color: rgba(250, 50, 50, 0.15);\n\n      --dashed-success-color: rgba(31, 141, 87, 1);\n      --dashed-success-light-color: rgba(31, 141, 87, 0.15);\n\n      --dashed-fill-color: var(--dashed-primary-light-color);\n      --dashed-outline-color: rgba(129, 129, 193);\n      z-index: 1;\n    }\n\n    :host(:focus) > * {\n      outline: 1px solid var(--dashed-outline-color);\n      outline-offset: 1px;\n    }\n\n    :host([disabled]) {\n      opacity: 0.6;\n      pointer-events: none;\n    }\n\n    svg.dash {\n      position: absolute;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      fill: none;\n      z-index: -1;\n    }\n\n    svg.dash .border {\n      stroke: var(--dashed-primary-color);\n      fill: var(--dashed-fill-color);\n    }\n\n    svg.dash .border-bottom {\n      stroke: var(--dashed-primary-color);\n    }\n\n    svg.dash .background {\n      fill: var(--dashed-fill-color);\n    }\n  </style>\n';class e extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open",delegatesFocus:!0}),this.borderRadius="24",this.dashWidth="2",this.dashLength="4",this.dashSpacing="2"}get disabled(){return this.hasAttribute("disabled")}set disabled(t){Boolean(t)?this.setAttribute("disabled",""):this.removeAttribute("disabled")}get ariaLabel(){return this.hasAttribute("aria-label")}set ariaLabel(t){Boolean(t)?this.setAttribute("aria-label",t):this.removeAttribute("aria-label")}get borderRadius(){return this.getAttribute("border-radius")}set borderRadius(t){this.setAttribute("border-radius",t)}get dashWidth(){return this.getAttribute("dash-width")}set dashWidth(t){this.setAttribute("dash-width",t)}get dashLength(){return this.getAttribute("dash-length")}set dashLength(t){this.setAttribute("dash-length",t)}get dashSpacing(){return this.getAttribute("dash-spacing")}set dashSpacing(t){this.setAttribute("dash-spacing",t)}connectedCallback(){this.render()}render(){const e=`${parseFloat(this.borderRadius)-4}`,s=document.createElement("template");s.innerHTML=`\n      ${n}\n      <style>\n        :host {\n          display: inline-block;\n          cursor: pointer;\n          outline: none;\n          position: relative;\n        }\n\n        :host(:hover) button {\n          color: var(--dashed-danger-color);\n        }\n\n        .button-container {\n          display: inline-flex;\n          align-items: center;\n          justify-content: center;\n          position: relative;\n          width: 56px;\n          height: 56px;\n        }\n\n        button {\n          width: 48px;\n          height: 48px;\n          display: inline-flex;\n          align-items: center;\n          justify-content: center;\n          background: none;\n          cursor: inherit;\n          border: none;\n          outline: none;\n          position: relative;\n          transition: color 50ms ease-in-out;\n\n          border: ${this.dashWidth}px solid;\n          border-image: ${t(this.dashWidth,this.dashLength,this.dashSpacing,this.borderRadius)};\n        }\n\n        button::before {\n          content: "";\n          box-sizing: border-box;\n          position: absolute;\n          top: 0;\n          left: 0;\n          width: 100%;\n          height: 100%;\n          border-radius: ${this.borderRadius}px;\n          background: var(--dashed-primary-light-color);\n        }\n\n        button::after {\n          content: "";\n          position: absolute;\n          top: 4px;\n          left: 4px;\n          bottom: 4px;\n          right: 4px;\n\n          border: ${this.dashWidth}px solid;\n          border-image: ${t(this.dashWidth,this.dashLength,this.dashSpacing,e)};\n        }\n      </style>\n      <div class="button-container">\n        <button type="button" aria-label="${this.ariaLabel}">\n          <slot name="icon"></slot>\n        </button>\n      </div>\n    `,this.shadowRoot.appendChild(s.content.cloneNode(!0))}}customElements.define("dashed-fab",e);export{e as DashedFab};
